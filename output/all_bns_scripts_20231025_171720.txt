# 1. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fmc_main.py
import yaml
from fmc.fmc_tools.fmcobjectmanager import FMCObjectManager
from fmc.fmc_tools.fwobjectsjsonparser import FWObjectsJsonParser
from common.environment_manager import Environment_Manager
from common.task_manager import Task_Manager


def main():
    env_file = "fmc/config/environment.yml"
    task_file = "fmc/config/tasks.yml"

    # Instantiate Environment_Manager
    env_mgr = Environment_Manager(env_file)
    selected_env_name = env_mgr.get_env()
    cred = env_mgr.get_cred()

    # Instantiate Task_Manager
    task_mgr = Task_Manager(task_file)
    selected_task = task_mgr.get_task()

    # Perform the selected task
    if selected_task == 'create firewall object json file':
        fmc_manager = FMCObjectManager(cred, selected_env_name)
        # print(fmc_manager.env)
        fmc_manager.run()
    if selected_task == 'deduplicate_policies':
        fortigateobjectmanager = FortigateObjectManager(selected_env_name, cred)
        fortigateobjectmanager.run()
        fortigatepolicymanager = FortigatePolicyManager(fortigateobjectmanager.firewall_obj_dict, selected_env_name)
        fortigatepolicymanager.run()
    if selected_task == 'deep_diff policies LIST[DICT]':
        folder_path = input("Enter the path to the folder for diff: ")
        json_diff = JSONDeepDiff(folder_path, selected_env_name)
        json_diff.run()
    if selected_task == 'convert object json to fortigate format':
        fwjsonfile = "C:/Users/jacki/Downloads/Homelab/DC_Automation/fmc/output/FMC-Test7.2.0_firewall_obj_dict.json"
        parser = FWObjectsJsonParser(selected_env_name, fwjsonfile)
        # print(fmc_manager.env)
        parser.run()
    
if __name__ == "__main__":
    main()
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fmc_main.py

# 2. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate_main.py
import yaml
from fortigate.fortigate_tools.fortigate_policy_manager_interface import FortigatePolicyManager
from fortigate.fortigate_tools.fortigateobjectmanager import FortigateObjectManager
from fortigate.fortigate_tools.jsondeepdiff_policies import JSONDeepDiff
from fortigate.fortigate_tools.run_commands_FGT_v1_OOP import FortiGateCLIAsync
from common.environment_manager import Environment_Manager
from common.task_manager import Task_Manager
import asyncio

def main():
    env_file = "config/environment.yml"
    task_file = "config/tasks.yml"

    # Instantiate Environment_Manager
    env_mgr = Environment_Manager(env_file)
    selected_env_name = env_mgr.get_env()
    cred = env_mgr.get_cred()

    # Instantiate Task_Manager
    task_mgr = Task_Manager(task_file)
    selected_task = task_mgr.get_task()

    # Perform the selected task
    if selected_task == 'create firewall object json file':
        fortigateobjectmanager = FortigateObjectManager(selected_env_name, cred)
        fortigateobjectmanager.run()
    elif selected_task == 'deduplicate_policies':
        fortigateobjectmanager = FortigateObjectManager(selected_env_name, cred)
        fortigateobjectmanager.run()
        fortigatepolicymanager = FortigatePolicyManager(fortigateobjectmanager.firewall_obj_dict, selected_env_name)
        fortigatepolicymanager.run()
    elif selected_task == 'deep_diff policies LIST[DICT]':
        folder_path = input("Enter the path to the folder for diff: ")
        json_diff = JSONDeepDiff(folder_path, selected_env_name)
        json_diff.run()
    elif selected_task == 'run_FGT_CLI':
        fgt_cli = FortiGateCLIAsync(host="192.168.3.1", username="joe", password="Iching12#")

        async def run_commands():
            await fgt_cli.connect()
            output = await fgt_cli.run_command("c v\nedit root\nget system status\nget sys interface\nget router info routing-table all\nconfig firewall service custom\nrename plex_port_32400 to plex_port\nrename tcp-8080 to tcp_8080\n")
            print(output)
            await fgt_cli.disconnect()

        asyncio.run(run_commands())
        

if __name__ == "__main__":
    main()

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate_main.py

# 3. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/common/environment_manager.py
from common.utils import load_yaml_file, prompt_menu

class Environment_Manager:
    def __init__(self, env_file):
        self.env_file = env_file
        self.environment_data = load_yaml_file(self.env_file)['environments']

    def get_env(self):
        environment_names = list(self.environment_data.keys())
        print()
        self.selected_env_name = prompt_menu(environment_names, "Choose an environment number from the above list: ")
        print()
        print(f"Selected environment: {self.selected_env_name}")
        return self.selected_env_name

    def get_cred(self):
        self.credential = self.environment_data[self.selected_env_name]
        return self.credential


# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\common\environment_manager.py

# 4. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/common/generate_cmd_batches_from_file.py
# generate_cmd_batches_from_file.py

def read_command_batches_from_file(file_path):
    """
    Read the FortiGate policy configurations from a text file and split them into command batches
    using the keyword 'next' as a delimiter.

    :param file_path: Path to the text file containing the commands
    :return: List of command batches; each batch is a list of commands for the same policy ID
    """
    command_batches = []
    command_batch = []

    # Open the text file and read line by line
    with open(file_path, 'r') as f:
        for line in f:
            line = line.strip()  # Remove leading/trailing white spaces
            if line:  # Skip empty lines
                command_batch.append(line)
                if line == 'next':  # Cut at 'next' keyword
                    cmd_batch = '\n'.join(command_batch)
                    # command_batches.append(command_batch.copy())
                    command_batches.append(cmd_batch)
                    command_batch.clear()

    return command_batches

# Example usage
file_path = "C:/Users/jacki/Downloads/labfgt_pol_config.txt"  # Replace this with the path to your file
command_batches = read_command_batches_from_file(file_path)
print(command_batches)

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\common\generate_cmd_batches_from_file.py

# 5. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/common/generate_requirements.py
import subprocess
import pkg_resources

try:
    # Get a list of installed packages
    installed_packages = [pkg.key for pkg in pkg_resources.working_set]

    # Create the requirements.txt file
    with open('requirements.txt', 'w') as file:
        for package in installed_packages:
            try:
                # Get the package version
                package_version = subprocess.check_output(['pip', 'show', package]).decode().split('\n')[1].split(': ')[1].strip()

                # Write the package and version to requirements.txt
                file.write(f"{package}=={package_version}\n")
            except Exception as e:
                print(f"An error occurred while processing {package}: {e}")
except Exception as e:
    print(f"An error occurred: {e}")

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\common\generate_requirements.py

# 6. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/common/get_all_pyfiles.py
import asyncio
import aiofiles
import os
from datetime import datetime

def generate_tree(directory):
    tree_str = ''
    for root, dirs, files in os.walk(directory):
        if 'fortigate-api' in dirs:
            dirs.remove('fortigate-api')
        python_files = [f for f in files if f.endswith('.py')]
        if python_files:
            level = root.replace(directory, '').count(os.sep)
            indent = ' ' * 4 * (level)
            tree_str += f'{indent}{root}/\n'
            subindent = ' ' * 4 * (level + 1)
            for f in python_files:
                tree_str += f'{subindent}{f}\n'
    return tree_str

async def concatenate_python_files():
    start_dir = os.getcwd()
    output_dir = os.path.join(start_dir, 'output')
    os.makedirs(output_dir, exist_ok=True)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    output_file_path = os.path.join(output_dir, f'all_bns_scripts_{timestamp}.txt')

    async with aiofiles.open(output_file_path, mode='w', encoding='utf-8') as outfile:
        file_count = 0
        sequence_number = 0
        for root, dirs, files in os.walk(start_dir):
            for dir_to_skip in ['fortigate-api', 'venv']: # !!! add folders to be skipped here !!!!
                if dir_to_skip in dirs:
                    dirs.remove(dir_to_skip)
            python_files = [f for f in files if f.endswith('.py') and not f.startswith('all_bns_')]
            file_count += len(python_files)
            for filename in python_files:
                sequence_number += 1
                filepath = os.path.join(root, filename)
                async with aiofiles.open(filepath, mode='r', encoding='utf-8') as infile:  # Added encoding here
                    contents = await infile.read()
                    await outfile.write(f"# {sequence_number}. File: {filepath.replace('\\', '/')}\n")
                    await outfile.write(contents)
                    await outfile.write(f"\n# End of {filepath}\n\n")
        await outfile.write(f"# Total number of Python files concatenated: {file_count}\n")
        tree_str = generate_tree(start_dir)
        await outfile.write(f"\n# Directory Structure:\n{tree_str}")

if __name__ == '__main__':
    asyncio.run(concatenate_python_files())

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\common\get_all_pyfiles.py

# 7. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/common/play_back_pyfiles_to_project_folder.py
"""
Overview:
This script performs two main tasks:
1. It reads an input text file that contains the code of multiple Python files. It replaces the
   original project folder name with an alternate one and writes the modified lines to an output text file.
2. It then asynchronously reads the output text file, extracts the code for each Python file, and writes it
   back to its respective original file, potentially in a new directory.

The script is designed to be run as a standalone program and uses Python's asyncio for asynchronous file operations.

Author: Joe Zhu
Date: Oct 25, 2023
"""

import asyncio
import aiofiles
import os
from datetime import datetime

def set_project_root_directory(inputf, outf, project_folder_name, alternate_project_folder_name):
    """
    Read the input file and replace the original project folder name with an alternate one.
    
    Parameters:
    - inputf (str): Path to the input file
    - outf (str): Path to the output file
    - project_folder_name (str): Original project folder name to find
    - alternate_project_folder_name (str): New project folder name to replace with
    
    Returns:
    - bool: True if the file path is valid, otherwise False
    """
    file_path_valid = False
    with open(inputf, 'r') as f:
        lines = f.readlines()

    # Replace original project folder name with the alternate one
    for idx, line in enumerate(lines):
        if 'File: C' in line or '# End of' in line:
            line = line.replace('\\', '/') 
            if project_folder_name in line:
                lines[idx] = line.replace(project_folder_name, alternate_project_folder_name)
                file_path_valid = True

    # Write the updated lines to the output file
    with open(outf, 'w') as f:
        f.write(''.join(lines))
        
    return file_path_valid

async def update_python_files(input_file_path):
    """
    Asynchronously read a text file that contains the code of multiple Python files, and write
    each Python file's code back to its original file.
    
    Parameters:
    - input_file_path (str): The path to the input file containing the Python code
    """
    async with aiofiles.open(input_file_path, 'r') as infile:
        lines = await infile.readlines()

    filepath = ''
    buffer = []
    update_count = 0
    
    # Loop through each line in the input file
    for line in lines:
        if line.startswith("#") and "File: " in line:
            # Extract the filepath from the line
            filepath = line.split('File: ')[1].strip()
        
        elif line.startswith("# End of"):
            # When the end of a file's content is reached
            
            # Skip if filepath is empty or non-existent
            if not filepath:
                print("Skipping an empty or non-existent filepath.")
                continue

            # Skip if buffer is empty (i.e., no content to write)
            if not buffer:
                print(f"No content to write for {filepath}. Skipping...")
                continue

            # Check if the directory exists. If not, create it.
            directory = os.path.dirname(filepath)
            if not os.path.exists(directory):
                print(f"The directory {directory} does not exist. Creating it.")
                os.makedirs(directory)

            # Write the content to the original file
            async with aiofiles.open(filepath, 'w') as outfile:
                await outfile.write(f"# {filepath}\n")  # Insert filepath at the top for documentation
                await outfile.write(''.join(buffer))
                update_count += 1
                print(f"Updated {filepath}")

            # Clear the buffer and filepath for the next file
            buffer.clear()
            filepath = ''
            
        else:
            # Add line to buffer (holding content of the current file being processed)
            buffer.append(line)
    
    print(f"Updated {update_count} Python files.")

if __name__ == '__main__':
    # Restore py files to an alternate folder
    project_folder_name = '/DC_Automation/'
    alternate_project_folder_name = '/DC_Automation2/'
    inputf = 'C:/Users/jacki/Downloads/Homelab/DC_Automation/output/all_bns_scripts_20231016_004244.txt'
    outf = f'{inputf.split(".")[0]}_for_restore_test.txt'
    
    file_path_valid = set_project_root_directory(inputf, outf, project_folder_name, alternate_project_folder_name)
    if file_path_valid:
        asyncio.run(update_python_files(outf))
    else:
        print(f"WARNING: Operation Aborted! Please check and make sure Project folder name is indeed {project_folder_name} in the concatenated python file name in order to avoid any potential data loss before updating the project python files!")

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\common\play_back_pyfiles_to_project_folder.py

# 8. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/common/task_manager.py
from common.utils import load_yaml_file, prompt_menu
from typing import List

class Task_Manager:
    def __init__(self, task_file: str):
        self.task_file = task_file
        self.task_data: List = load_yaml_file(self.task_file)['tasks']

    def get_task(self):
        self.selected_task_name = prompt_menu(self.task_data, "Choose a task number from the above list: ")
        print(f"Selected task: {self.selected_task_name}")
        return self.selected_task_name
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\common\task_manager.py

# 9. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/common/timeit.py
import time
from functools import wraps

def timeit(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        print(f"{func.__name__} took {end_time - start_time:.6f} seconds to execute.")
        return result
    return wrapper

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\common\timeit.py

# 10. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/common/utils.py
import yaml
import json
from typing import Union


def json_file_to_dict(file_path: str) -> Union[dict, None]:
    try:
        with open(file_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError as e:
        print(f"File not found: {e}")
        return None
    except json.JSONDecodeError as e:
        print(f"An error occurred while decoding JSON: {e}")
        return None

def load_yaml_file(filepath):
        with open(filepath, 'r') as file:
            return yaml.safe_load(file)

def prompt_menu(options, prompt_message):
        print()
        for idx, option in enumerate(options, 1):
            print(f"{idx}. {option}")
        print()
        choice = int(input(f'{prompt_message}'))
        return options[choice - 1]


# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\common\utils.py

# 11. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fmc/fmc_tools/acp.py
from fmcapi import *
import json

'''
https://www.youtube.com/watch?v=4NIe3T-HjDwAuthorship and gratitude for contributors.

This python module was created by Dax Mickelson along with LOTs of help from Ryan Malloy and Neil Patel.
Thank you to the github community members who have also pitched in, especially Mark Sullivan and his team.  Feel
free to send comments/suggestions/improvements.  Either by email: dmickels@cisco.com or more importantly via a pull
request from the github repository: https://github.com/daxm/fmcapi.
'''
# Initialize FMC object
fmc_host = "fmcrestapisandbox.cisco.com"  # Add 'https://' before the host name
username = "ZijianZhu3"
password = "zWbWbe6u"

# Initialize empty lists to hold dictionaries for each object type
host_list = []
address_group_list = []
service_list = []
service_group_list = []
policy_list = []

with FMC(host=fmc_host, username=username, password=password, autodeploy=False) as fmc:
    # Initialize dictionaries to hold various objects
    all_objects = {}
     # Initialize an empty list for policies
    policy_list = []

    # Fetch and populate Policies
    policies_obj = AccessPolicies(fmc=fmc)
    response = policies_obj.get()
    print(f"acp {response=}")
    if 'items' in response:
        for policy in response[:3]['items']:
            policy_list.append({
                'id': policy.get('id', 'N/A'),
                'name': policy.get('name', 'N/A'),
                'type': policy.get('type', 'N/A'),
                'description': policy.get('description', 'N/A'),
                'defaultAction': policy.get('defaultAction', 'N/A'),
                'prefilterPolicySetting': policy.get('prefilterPolicySetting', 'N/A')
            })

    # Add the policy list to the all_objects dictionary
    all_objects['Policies'] = policy_list

    # Initialize an empty list for Access Rules
    access_rule_list = []

    # Fetch and populate AccessRules for each ACP:
    for acp in  all_objects['Policies']:
        acp_name = acp['name']
        access_rules_obj = AccessRules(fmc=fmc, acp_name=acp_name)
        response = access_rules_obj.get()
        # print(f"accessrule {response=}")
        if 'items' in response:
            for rule in response['items']:
                access_rule_list.append({
                    'id': rule.get('id', 'N/A'),
                    'name': rule.get('name', 'N/A'),
                    'type': rule.get('type', 'N/A'),
                    'action': rule.get('action', 'N/A'),
                    'enabled': rule.get('enabled', 'N/A'),
                    'sendEventsToFMC': rule.get('sendEventsToFMC', 'N/A'),
                    'logFiles': rule.get('logFiles', 'N/A'),
                    'logBegin': rule.get('logBegin', 'N/A'),
                    'logEnd': rule.get('logEnd', 'N/A'),
                    'variableSet': rule.get('variableSet', 'N/A'),
                    'originalSourceNetworks': rule.get('originalSourceNetworks', 'N/A'),
                    'vlanTags': rule.get('vlanTags', 'N/A'),
                    'users': rule.get('users', 'N/A'),
                    'sourceNetworks': rule.get('sourceNetworks', 'N/A'),
                    'destinationNetworks': rule.get('destinationNetworks', 'N/A'),
                    'sourcePorts': rule.get('sourcePorts', 'N/A'),
                    'destinationPorts': rule.get('destinationPorts', 'N/A'),
                    'ipsPolicy': rule.get('ipsPolicy', 'N/A'),
                    'urls': rule.get('urls', 'N/A'),
                    'sourceZones': rule.get('sourceZones', 'N/A'),
                    'destinationZones': rule.get('destinationZones', 'N/A'),
                    'applications': rule.get('applications', 'N/A'),
                    'filePolicy': rule.get('filePolicy', 'N/A'),
                    'sourceSecurityGroupTags': rule.get('sourceSecurityGroupTags', 'N/A'),
                    'destinationSecurityGroupTags': rule.get('destinationSecurityGroupTags', 'N/A'),
                    'enableSyslog': rule.get('enableSyslog', 'N/A'),
                    'newComments': rule.get('newComments', 'N/A'),
                    'commentHistoryList': rule.get('commentHistoryList', 'N/A')
                })

    # Add the Access Rule list to the all_objects dictionary
    all_objects['AccessRules'] = access_rule_list
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fmc\fmc_tools\acp.py

# 12. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fmc/fmc_tools/fmcobjectmanager.py
from fmcapi import *
import json
from typing import List, Dict
import time
from common.timeit import timeit


class FMCObjectManager:

    def __init__(self, cred, env):
        self.env = env
        self.cred = cred
        self.firewall_obj_dict = {}

    def fetch_objects(self, obj_class, key_name, additional_fields=[], dependency=''):
        obj_list = []
        if dependency:
            if obj_class.__name__ == "AccessRules":
                obj_instance = obj_class(fmc=self.fmc, acp_name=dependency)
                response = obj_instance.get()
                time.sleep(30)
                if 'items' in response:
                    for obj in response['items']:
                        obj_dict = {
                            'id': obj.get('id', 'N/A'),
                            'name': obj.get('name', 'N/A'),
                            'type': obj.get('type', 'N/A'),
                        }
                        for field in additional_fields:
                            obj_dict[field] = obj.get(field, 'any') # FMC sucks: whenever field=any, it doesn't even have the key show up in the output!!!
                            obj_dict["acp_name"] = dependency
                        obj_list.append(obj_dict)
                self.firewall_obj_dict[key_name] = obj_list

            elif obj_class.__name__ in ["ManualNatRules", "AutoNatRules", "NatRules"]:
                obj_instance = obj_class(fmc=self.fmc)
                obj_instance.nat_policy(name=dependency)
                response = obj_instance.get()
                time.sleep(30)
                if 'items' in response:
                    for obj in response['items']:
                        obj_dict = {
                            'id': obj.get('id', 'N/A'),
                            'name': obj.get('name', 'N/A'),
                            'type': obj.get('type', 'N/A'),
                        }
                        for field in additional_fields:
                            obj_dict[field] = obj.get(field, 'N/A')
                        obj_dict["natpolicy_name"] = dependency
                        obj_list.append(obj_dict)
                self.firewall_obj_dict[key_name] = obj_list    
            elif obj_class.__name__ == "IPv4StaticRoutes":
                obj_instance = obj_class(fmc=self.fmc)
                obj_instance.device(dependency)
                response = obj_instance.get()
                time.sleep(30)
                if 'items' in response:
                    for obj in response['items']:
                        obj_dict = {
                            'id': obj.get('id', 'N/A'),
                            'name': obj.get('name', 'N/A'),
                            'type': obj.get('type', 'N/A'),
                        }
                        for field in additional_fields:
                            obj_dict[field] = obj.get(field, 'N/A')
                        obj_dict["device_name"] = dependency
                        obj_list.append(obj_dict)
                self.firewall_obj_dict[key_name] = obj_list    
        else:
            obj_instance = obj_class(fmc=self.fmc)
            response = obj_instance.get()
            time.sleep(30)
            if 'items' in response:
                for obj in response['items']:
                    obj_dict = {
                        'id': obj.get('id', 'N/A'),
                        'name': obj.get('name', 'N/A'),
                        'type': obj.get('type', 'N/A'),
                    }
                    for field in additional_fields:
                        obj_dict[field] = obj.get(field, 'N/A')
                    obj_list.append(obj_dict)
            self.firewall_obj_dict[key_name] = obj_list
    @timeit
    def run(self):
        with FMC(**self.cred, autodeploy=False) as self.fmc:
            # Fetch and populate various types of objects
            self.fetch_objects(Hosts, 'Addresses', ['id', 'name', 'type', 'value', 'description'])
            self.fetch_objects(Ranges, 'Ranges', ['id', 'name', 'value', 'description'])
            self.fetch_objects(Networks, 'Networks', ['id', 'name', 'value', 'description'])
            self.fetch_objects(NetworkGroups, 'AddressGroups', ['id', 'name', 'type', 'objects', 'literals', 'description'])
            self.fetch_objects(ProtocolPortObjects, 'Services', ['id', 'name', 'type', 'description', 'port', 'protocol'])
            self.fetch_objects(ICMPv4Objects, 'ICMPv4Objects', ['id', 'name', 'type', 'description', 'overrideTargetId', 'code', 'icmpType', 'overrides', 'overridable'])
            self.fetch_objects(PortObjectGroups, 'ServiceGroups', ['id', 'name', 'type', 'objects', 'literals', 'description'])
            self.fetch_objects(Applications, 'Applications', ['id', 'name', 'type'])
            self.fetch_objects(InterfaceGroups, 'InterfaceGroups', ['id', 'name', 'type', 'description', 'interfaceMode', 'interfaces'])
            self.fetch_objects(SecurityZones, 'SecurityZones', ['id', 'name', 'type', 'description', 'interfaceMode', 'interfaces'])
            self.fetch_objects(AccessPolicies, 'Policies', ['id', 'name', 'type', 'description', 'defaultAction', 'prefilterPolicySetting'])
            # print(f"{self.firewall_obj_dict['Policies']=}")
            for acp in self.firewall_obj_dict['Policies']:
                self.acp_name = acp.get('name', None)
                # print(f"{self.acp_name=}")
                self.fetch_objects(AccessRules, 'AccessRules', ['id', 'name', 'type', 'action', 'enabled', 'sendEventsToFMC', 'logFiles', 'logBegin', 'logEnd', 'variableSet', 'originalSourceNetworks', 'vlanTags', 'users', 'sourceNetworks', 'destinationNetworks', 'sourcePorts', 'destinationPorts', 'ipsPolicy', 'urls', 'sourceZones', 'destinationZones', 'applications', 'filePolicy', 'sourceSecurityGroupTags', 'destinationSecurityGroupTags', 'enableSyslog', 'newComments', 'commentHistoryList', 'acp_name'], dependency=self.acp_name)
            self.fetch_objects(PolicyAssignments, 'PolicyAssignments', ['id', 'name', 'type', 'targets', 'policy'])
            self.fetch_objects(FTDNatPolicies, 'FTDNatPolicies', ['id', 'name', 'type'])
            for natpolicy in self.firewall_obj_dict['FTDNatPolicies']:
                self.natpolicy_name = natpolicy.get('name', None)
                if self.natpolicy_name:
                    self.fetch_objects(AutoNatRules, 'AutoNatRules', ['id', 'name', 'type', 'originalNetwork', 'translatedNetwork', 'interfaceInTranslatedNetwork', 'natType', 'interfaceIpv6', 'fallThrough', 'dns', 'routeLookup', 'noProxyArp', 'netToNet', 'sourceInterface', 'destinationInterface', 'originalPort', 'translatedPort', 'serviceProtocol', 'patOptions', 'description', 'natpolicy_name'], dependency=self.natpolicy_name)
            for natpolicy in self.firewall_obj_dict['FTDNatPolicies']:
                self.natpolicy_name = natpolicy.get('name', None)
                if self.natpolicy_name:
                    self.fetch_objects(ManualNatRules, 'ManualNatRules', ['id', 'name', 'type', 'originalSource', 'originalDestination', 'translatedSource', 'translatedDestination', 'interfaceInTranslatedSource', 'interfaceInOriginalDestination', 'natType', 'interfaceIpv6', 'fallThrough', 'dns', 'routeLookup', 'noProxyArp', 'netToNet', 'sourceInterface', 'destinationInterface', 'originalSourcePort', 'translatedSourcePort', 'originalDestinationPort', 'translatedDestinationPort', 'patOptions', 'unidirectional', 'enabled', 'description', 'natpolicy_name'], dependency=self.natpolicy_name)
            for natpolicy in self.firewall_obj_dict['FTDNatPolicies']:
                self.natpolicy_name = natpolicy.get('name', None)
                if self.natpolicy_name:
                    self.fetch_objects(NatRules, 'NatRules', ['id', 'name', 'type'], dependency=self.natpolicy_name)
            self.fetch_objects(DeviceRecords, 'DeviceRecords', ['id', 'name', 'type', 'hostName', 'natID', 'regKey', 'license_caps', 'performanceTier', 'accessPolicy'])
            for device in self.firewall_obj_dict['DeviceRecords']:
                self.dev_name = device.get('name', None)
                if self.dev_name:
                    self.fetch_objects(IPv4StaticRoutes, 'IPv4StaticRoutes', ['id', 'name', 'interfaceName', 'selectedNetworks', 'gateway', 'routeTracking', 'metricValue', 'isTunneled'], dependency=self.dev_name)


            # Save to JSON
            json_file = f'fmc/output/{self.env}_firewall_obj_dict.json'  # Specify the actual path where you want to save the JSON file
            with open(json_file, 'w') as f:
                json.dump(self.firewall_obj_dict, f, indent=4)
            print(f"File saved to {json_file}...")
# if __name__ == "__main__":
#     fmc_manager = FMCObjectManager(env, **cred)
#     fmc_manager.run()
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fmc\fmc_tools\fmcobjectmanager.py

# 13. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fmc/fmc_tools/fwobjectsjsonparser.py
import os
import sys
sys.path.append(os.getcwd())
import json
from common.utils import json_file_to_dict

class FWObjectsJsonParser():
    def __init__(self, env, json_file):
        self.json_file = json_file
        self.env = env
        self.fw_obj_dict = json_file_to_dict(self.json_file)
        self.output_fwobj_dict = {}

    def run(self):
        self.output_fwpol_list = []
        self.output_fwpol_dict = {}
        for rule in self.fw_obj_dict["AccessRules"]:
            # get rule name
            name = rule['name']
            # get status
            if rule['enabled'] == True:
                status = 'enable'
            else:
                status = 'disable'
            # get src int list of dict
            srcint_list = []
            for int in rule["sourceZones"][ "objects"]:
                srcint_dict = {}
                sintname = int["name"]
                srcint_dict["name"] = sintname
                srcint_list.append(srcint_dict)
            # get dst int list of dict
            dstint_list = []
            for int in rule["destinationZones"][ "objects"]:
                dstint_dict = {}
                dintname = int["name"]
                dstint_dict["name"] = dintname
                dstint_list.append(dstint_dict)
            # get action
            if rule['action'] == 'ALLOW':
                action = 'accept'
            else:
                action = 'deny'
            # get srcaddr list of dict
            srcaddr_list = []
            if isinstance(rule["sourceNetworks"], dict):
                for addr in rule["sourceNetworks"][ "objects"]:
                    srcaddr_dict = {}
                    saddrname = addr["name"]
                    srcaddr_dict["name"] = saddrname
                    srcaddr_list.append(srcaddr_dict)
            else:
                srcaddr_dict = {}
                srcaddr_dict["name"] = 'all'
                srcaddr_list.append(srcaddr_dict)
            # get dstaddr list of dict
            dstaddr_list = []
            if isinstance(rule["destinationNetworks"], dict):
                for addr in rule["destinationNetworks"][ "objects"]:
                    dstaddr_dict = {}
                    daddrname = addr["name"]
                    dstaddr_dict["name"] = daddrname
                    dstaddr_list.append(dstaddr_dict)
            else:
                dstaddr_dict = {}
                dstaddr_dict["name"] = 'all'
                dstaddr_list.append(dstaddr_dict)
            # get service list of dict
            service_list = []
            if isinstance(rule["destinationPorts"], dict):
                for svc in rule["destinationPorts"][ "objects"]:
                    service_dict = {}
                    svcname = svc["name"]
                    service_dict["name"] = svcname
                    service_list.append(service_dict)
            else:
                service_dict = {}
                service_dict["name"] = 'ALL'
                service_list.append(service_dict)
            # get comments
            comments = rule["newComments"]
            self.output_fwpol_dict = {
                'name': name,
                "status": status,
                "srcintf": srcint_list,
                "dstintf": dstint_list,
                "action": action,
                "srcaddr": srcaddr_list,
                "dstaddr": dstaddr_list,
                "service": service_list
                }
            self.output_fwpol_list.append(self.output_fwpol_dict)
        
        # parsing host address
        self.output_fwaddr_list = []
        self.output_fwaddr_dict = {}
        for addr in self.fw_obj_dict["Addresses"]:
            # get name
            addrname = addr['name']
            # get type
            if addr['type'] == 'Host':
                type = "ipmask"
            else:
                pass
            # get subnet
            subnet = addr['value']
            # get comment
            comment = addr['description']
            self.output_fwaddr_dict = {
                'name': addrname,
                "type": type,
                "subnet": subnet,
                "comment": comment
                }
            self.output_fwaddr_list.append(self.output_fwaddr_dict)
        # parsing network address

        self.output_fwaddr_dict = {}
        for addr in self.fw_obj_dict["Networks"]:
            # get name
            addrname = addr['name']
            # get type
            if addr['type'] == "Network":
                type = "ipmask"
            else:
                pass
            # get subnet
            subnet = addr['value']
            # get comment
            comment = addr['description']
            self.output_fwaddr_dict = {
                'name': addrname,
                "type": type,
                "subnet": subnet,
                "comment": comment
                }
            self.output_fwaddr_list.append(self.output_fwaddr_dict)
        self.output_fwobj_dict = {
            'policies': self.output_fwpol_list,
            'addresses': self.output_fwaddr_list
            }
        
        # Save to JSON
        json_file = f'fmc/output/{self.env}_parsed_firewall_obj_dict.json'
        with open(json_file, 'w') as f:
            json.dump(self.output_fwobj_dict, f, indent=4)
        print(f"File saved to {json_file}...")
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fmc\fmc_tools\fwobjectsjsonparser.py

# 14. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fmc/fmc_tools/old fmc obj.py
from fmcapi import *
import json

'''
https://www.youtube.com/watch?v=4NIe3T-HjDwAuthorship and gratitude for contributors.

This python module was created by Dax Mickelson along with LOTs of help from Ryan Malloy and Neil Patel.
Thank you to the github community members who have also pitched in, especially Mark Sullivan and his team.  Feel
free to send comments/suggestions/improvements.  Either by email: dmickels@cisco.com or more importantly via a pull
request from the github repository: https://github.com/daxm/fmcapi.
'''
# Initialize FMC object
<<<<<<< HEAD:fmc/fmc_tools/test.py
fmc_host = "fmcrestapisandbox.cisco.com"  # Add 'https://' before the host name
username = "ZijianZhu3"
password = "uCdLzGMt"
=======
fmc_host = "192.168.3.37"
username = "admin"
password = "Buguan372!"
>>>>>>> c87a643d619854914e2d7f376b331a97ce85d721:fmc/fmc_tools/old fmc obj.py

# Initialize empty lists to hold dictionaries for each object type
host_list = []
address_group_list = []
service_list = []
service_group_list = []
policy_list = []

with FMC(host=fmc_host, username=username, password=password, autodeploy=False) as fmc:
    # Initialize dictionaries to hold various objects
    all_objects = {}

    # Fetch and populate Hosts (Addresses)
    hosts_obj = Hosts(fmc=fmc)
    response = hosts_obj.get()
    if 'items' in response:
        for host in response['items']:
            host_list.append({
                'id': host.get('id', 'N/A'),
                'name': host.get('name', 'N/A'),
                'type': host.get('type', 'N/A'),
                'value': host.get('value', 'N/A'),
                'description': host.get('description', 'N/A')
            })
    all_objects['Addresses'] = host_list

    # Initialize an empty list for IP Ranges
    range_list = []

    # Fetch and populate Ranges
    ranges_obj = Ranges(fmc=fmc)
    response = ranges_obj.get()
    if 'items' in response:
        for ip_range in response['items']:
            range_list.append({
                'id': ip_range.get('id', 'N/A'),
                'name': ip_range.get('name', 'N/A'),
                'value': ip_range.get('value', 'N/A'),
                'description': ip_range.get('description', 'N/A')
            })

    # Add the Range list to the all_objects dictionary
    all_objects['Ranges'] = range_list

    # Fetch and populate Address Groups
    address_groups_obj = NetworkGroups(fmc=fmc)
    response = address_groups_obj.get()
    if 'items' in response:
        for group in response['items']:
            address_group_list.append({
                'id': group.get('id', 'N/A'),
                'name': group.get('name', 'N/A'),
                'type': group.get('type', 'N/A'),
                'objects': group.get('objects', 'N/A'),
                'literals': group.get('literals', 'N/A'),
                'description': group.get('description', 'N/A')
            })
    all_objects['AddressGroups'] = address_group_list

    # Fetch and populate Services

    services_obj = ProtocolPortObjects(fmc=fmc)
    response = services_obj.get()
    if 'items' in response:
        for service in response['items']:
            service_list.append({
            'id': service.get('id', 'N/A'),
            'name': service.get('name', 'N/A'),
            'description': service.get('description', 'N/A'),
            'port': service.get('port', 'N/A'),
            'protocol': service.get('protocol', 'N/A'),
            'type': service.get('type', 'N/A')
            })

    all_objects['Services'] = service_list

    # Initialize an empty list for ICMPv4 objects
    icmpv4_list = []

    # Fetch and populate ICMPv4Objects
    icmpv4_obj = ICMPv4Objects(fmc=fmc)
    response = icmpv4_obj.get()
    if 'items' in response:
        for icmpv4 in response['items']:
            icmpv4_list.append({
                'id': icmpv4.get('id', 'N/A'),
                'name': icmpv4.get('name', 'N/A'),
                'description': icmpv4.get('description', 'N/A'),
                'type': icmpv4.get('type', 'N/A'),
                'overrideTargetId': icmpv4.get('overrideTargetId', 'N/A'),
                'code': icmpv4.get('code', 'N/A'),
                'icmpType': icmpv4.get('icmpType', 'N/A'),
                'overrides': icmpv4.get('overrides', 'N/A'),
                'overridable': icmpv4.get('overridable', 'N/A')
            })

    # Add the ICMPv4 list to the all_objects dictionary
    all_objects['ICMPv4Objects'] = icmpv4_list

    # Fetch and populate Service Groups
    service_groups_obj = PortObjectGroups(fmc=fmc)  
    response = service_groups_obj.get()
    if 'items' in response:
        for service_group in response['items']:
            service_group_list.append({
                'id': service_group.get('id', 'N/A'),
                'name': service_group.get('name', 'N/A'),
                'type': service_group.get('type', 'N/A'),
                'objects': service_group.get('objects', 'N/A'),
                'literals': service_group.get('literals', 'N/A'),
                'description': service_group.get('description', 'N/A')
            })
    all_objects['ServiceGroups'] = service_group_list

    # Initialize an empty list for applications
    application_list = []

    # Fetch and populate Applications
    applications_obj = Applications(fmc=fmc)
    response = applications_obj.get()
    if 'items' in response:
        for application in response['items']:
            application_list.append({
                'id': application.get('id', 'N/A'),
                'name': application.get('name', 'N/A'),
                'type': application.get('type', 'N/A')
            })

    # Add the application list to the all_objects dictionary
    all_objects['Applications'] = application_list

    # Initialize an empty list for Interface Groups
    interface_group_list = []

    # Fetch and populate InterfaceGroups
    interface_groups_obj = InterfaceGroups(fmc=fmc)
    response = interface_groups_obj.get()
    if 'items' in response:
        for intf_group in response['items']:
            interface_group_list.append({
                'id': intf_group.get('id', 'N/A'),
                'name': intf_group.get('name', 'N/A'),
                'description': intf_group.get('description', 'N/A'),
                'interfaceMode': intf_group.get('interfaceMode', 'N/A'),
                'interfaces': intf_group.get('interfaces', 'N/A')
            })

    # Add the Interface Group list to the all_objects dictionary
    all_objects['InterfaceGroups'] = interface_group_list

    # Initialize an empty list for Security Zones
    security_zone_list = []

    # Fetch and populate SecurityZones
    security_zones_obj = SecurityZones(fmc=fmc)
    response = security_zones_obj.get()
    if 'items' in response:
        for sec_zone in response['items']:
            security_zone_list.append({
                'id': sec_zone.get('id', 'N/A'),
                'name': sec_zone.get('name', 'N/A'),
                'type': sec_zone.get('type', 'N/A'),
                'description': sec_zone.get('description', 'N/A'),
                'interfaceMode': sec_zone.get('interfaceMode', 'N/A'),
                'interfaces': sec_zone.get('interfaces', 'N/A')
            })

    # Add the Security Zone list to the all_objects dictionary
    all_objects['SecurityZones'] = security_zone_list

    # Initialize an empty list for policies
    policy_list = []

    # Fetch and populate Policies
    policies_obj = AccessPolicies(fmc=fmc)
    response = policies_obj.get()
    if 'items' in response:
<<<<<<< HEAD:fmc/fmc_tools/test.py
        for policy in response['items']:
=======
        for policy in response['items'][:3]:
>>>>>>> c87a643d619854914e2d7f376b331a97ce85d721:fmc/fmc_tools/old fmc obj.py
            policy_list.append({
                'id': policy.get('id', 'N/A'),
                'name': policy.get('name', 'N/A'),
                'type': policy.get('type', 'N/A'),
                'description': policy.get('description', 'N/A'),
                'defaultAction': policy.get('defaultAction', 'N/A'),
                'prefilterPolicySetting': policy.get('prefilterPolicySetting', 'N/A')
            })

    # Add the policy list to the all_objects dictionary
    all_objects['Policies'] = policy_list

    # Initialize an empty list for Access Rules
    access_rule_list = []

    # Fetch and populate AccessRules for each ACP:
    for acp in  all_objects['Policies']:
        acp_name = acp['name']
        access_rules_obj = AccessRules(fmc=fmc, acp_name=acp_name)
        response = access_rules_obj.get()
        if 'items' in response:
            for rule in response['items']:
                access_rule_list.append({
                    'id': rule.get('id', 'N/A'),
                    'name': rule.get('name', 'N/A'),
                    'type': rule.get('type', 'N/A'),
                    'action': rule.get('action', 'N/A'),
                    'enabled': rule.get('enabled', 'N/A'),
                    'sendEventsToFMC': rule.get('sendEventsToFMC', 'N/A'),
                    'logFiles': rule.get('logFiles', 'N/A'),
                    'logBegin': rule.get('logBegin', 'N/A'),
                    'logEnd': rule.get('logEnd', 'N/A'),
                    'variableSet': rule.get('variableSet', 'N/A'),
                    'originalSourceNetworks': rule.get('originalSourceNetworks', 'N/A'),
                    'vlanTags': rule.get('vlanTags', 'N/A'),
                    'users': rule.get('users', 'N/A'),
                    'sourceNetworks': rule.get('sourceNetworks', 'N/A'),
                    'destinationNetworks': rule.get('destinationNetworks', 'N/A'),
                    'sourcePorts': rule.get('sourcePorts', 'N/A'),
                    'destinationPorts': rule.get('destinationPorts', 'N/A'),
                    'ipsPolicy': rule.get('ipsPolicy', 'N/A'),
                    'urls': rule.get('urls', 'N/A'),
                    'sourceZones': rule.get('sourceZones', 'N/A'),
                    'destinationZones': rule.get('destinationZones', 'N/A'),
                    'applications': rule.get('applications', 'N/A'),
                    'filePolicy': rule.get('filePolicy', 'N/A'),
                    'sourceSecurityGroupTags': rule.get('sourceSecurityGroupTags', 'N/A'),
                    'destinationSecurityGroupTags': rule.get('destinationSecurityGroupTags', 'N/A'),
                    'enableSyslog': rule.get('enableSyslog', 'N/A'),
                    'newComments': rule.get('newComments', 'N/A'),
<<<<<<< HEAD:fmc/fmc_tools/test.py
                    'commentHistoryList': rule.get('commentHistoryList', 'N/A')
=======
                    'commentHistoryList': rule.get('commentHistoryList', 'N/A'),
                    'acp_name': acp_name
>>>>>>> c87a643d619854914e2d7f376b331a97ce85d721:fmc/fmc_tools/old fmc obj.py
                })

    # Add the Access Rule list to the all_objects dictionary
    all_objects['AccessRules'] = access_rule_list

    # Initialize an empty list for Policy Assignments
    policy_assignment_list = []

    # Fetch and populate PolicyAssignments
    policy_assignments_obj = PolicyAssignments(fmc=fmc)
    response = policy_assignments_obj.get()
    if 'items' in response:
        for assignment in response['items']:
            policy_assignment_list.append({
                'id': assignment.get('id', 'N/A'),
                'name': assignment.get('name', 'N/A'),
                'type': assignment.get('type', 'N/A'),
                'targets': assignment.get('targets', 'N/A'),
                'policy': assignment.get('policy', 'N/A')
            })

    # Add the Policy Assignment list to the all_objects dictionary
    all_objects['PolicyAssignments'] = policy_assignment_list

 # Initialize an empty list for FTD NAT Policies
    ftd_nat_policy_list = []

    # Fetch and populate FTDNatPolicies
    ftd_nat_policies_obj = FTDNatPolicies(fmc=fmc)
    response = ftd_nat_policies_obj.get()
    # print(f'Response {ftd_nat_policies_obj=}')
    # for key in response:
    #     print(f'response {ftd_nat_policies_obj} {key=}')
    if 'items' in response:
        for policy in response['items']:
            ftd_nat_policy_list.append({
                'id': policy.get('id', 'N/A'),
                'name': policy.get('name', 'N/A'),
                'type': policy.get('type', 'N/A')
            })

    # Add the FTD NAT Policy list to the all_objects dictionary
    all_objects['FTDNatPolicies'] = ftd_nat_policy_list

    # Initialize an empty list for Auto NAT Rules
    auto_nat_rule_list = []

    # Fetch AutoNatRules based on FTDNatPolicies
    for natpolicy in all_objects['FTDNatPolicies']:
        natpolicy_name = natpolicy.get('name', None)
        if natpolicy_name:
            # Fetch and populate AutoNatRules
            auto_nat_rules_obj = AutoNatRules(fmc=fmc)
            auto_nat_rules_obj.nat_policy(name=natpolicy_name)
            response = auto_nat_rules_obj.get()
            print(f"auto_nat_rules_obj {response=}")
            if response and 'items' in response:
                for rule in response['items']:
                    auto_nat_rule_list.append({
                        'id': rule.get('id', 'N/A'),
                        'name': rule.get('name', 'N/A'),
                        'type': rule.get('type', 'N/A'),
                        'originalNetwork': rule.get('originalNetwork', 'N/A'),
                        'translatedNetwork': rule.get('translatedNetwork', 'N/A'),
                        'interfaceInTranslatedNetwork': rule.get('interfaceInTranslatedNetwork', 'N/A'),
                        'natType': rule.get('natType', 'N/A'),
                        'interfaceIpv6': rule.get('interfaceIpv6', 'N/A'),
                        'fallThrough': rule.get('fallThrough', 'N/A'),
                        'dns': rule.get('dns', 'N/A'),
                        'routeLookup': rule.get('routeLookup', 'N/A'),
                        'noProxyArp': rule.get('noProxyArp', 'N/A'),
                        'netToNet': rule.get('netToNet', 'N/A'),
                        'sourceInterface': rule.get('sourceInterface', 'N/A'),
                        'destinationInterface': rule.get('destinationInterface', 'N/A'),
                        'originalPort': rule.get('originalPort', 'N/A'),
                        'translatedPort': rule.get('translatedPort', 'N/A'),
                        'serviceProtocol': rule.get('serviceProtocol', 'N/A'),
                        'patOptions': rule.get('patOptions', 'N/A'),
                        'description': rule.get('description', 'N/A'),
                        'natpolicy_name': natpolicy_name
                    })

    # Add the Auto NAT Rule list to the all_objects dictionary
    all_objects['AutoNatRules'] = auto_nat_rule_list

   
    # Initialize an empty list for Manual NAT Rules
    manual_nat_rule_list = []

    # Fetch ManualNatRules based on FTDNatPolicies
    for natpolicy in all_objects['FTDNatPolicies']:
        natpolicy_name = natpolicy.get('name', None)
        if natpolicy_name:
            # Fetch and populate ManualNatRules
            manual_nat_rules_obj = ManualNatRules(fmc=fmc)
            manual_nat_rules_obj.nat_policy(name=natpolicy_name)
            response = manual_nat_rules_obj.get()
            if 'items' in response:
                for rule in response['items']:
                    manual_nat_rule_list.append({
                        'id': rule.get('id', 'N/A'),
                        'name': rule.get('name', 'N/A'),
                        'type': rule.get('type', 'N/A'),
                        'originalSource': rule.get('originalSource', 'N/A'),
                        'originalDestination': rule.get('originalDestination', 'N/A'),
                        'translatedSource': rule.get('translatedSource', 'N/A'),
                        'translatedDestination': rule.get('translatedDestination', 'N/A'),
                        'interfaceInTranslatedSource': rule.get('interfaceInTranslatedSource', 'N/A'),
                        'interfaceInOriginalDestination': rule.get('interfaceInOriginalDestination', 'N/A'),
                        'natType': rule.get('natType', 'N/A'),
                        'interfaceIpv6': rule.get('interfaceIpv6', 'N/A'),
                        'fallThrough': rule.get('fallThrough', 'N/A'),
                        'dns': rule.get('dns', 'N/A'),
                        'routeLookup': rule.get('routeLookup', 'N/A'),
                        'noProxyArp': rule.get('noProxyArp', 'N/A'),
                        'netToNet': rule.get('netToNet', 'N/A'),
                        'sourceInterface': rule.get('sourceInterface', 'N/A'),
                        'destinationInterface': rule.get('destinationInterface', 'N/A'),
                        'originalSourcePort': rule.get('originalSourcePort', 'N/A'),
                        'translatedSourcePort': rule.get('translatedSourcePort', 'N/A'),
                        'originalDestinationPort': rule.get('originalDestinationPort', 'N/A'),
                        'translatedDestinationPort': rule.get('translatedDestinationPort', 'N/A'),
                        'patOptions': rule.get('patOptions', 'N/A'),
                        'unidirectional': rule.get('unidirectional', 'N/A'),
                        'enabled': rule.get('enabled', 'N/A'),
                        'description': rule.get('description', 'N/A'),
                        'natpolicy_name': natpolicy_name
                    })

    # Add the Manual NAT Rule list to the all_objects dictionary
    all_objects['ManualNatRules'] = manual_nat_rule_list

    # NatRules class provides a way to fetch [id,name,type] of any type of nat rules - ManualNatRules or AutoNatRules
    # Initialize an empty list for NAT Rules
    nat_rule_list = []

    for natpolicy in all_objects['FTDNatPolicies']:
        natpolicy_name = natpolicy.get('name', None)
        if natpolicy_name:
            # Fetch and populate NatRules
            nat_rules_obj = NatRules(fmc=fmc)
            nat_rules_obj.nat_policy(name=natpolicy_name)
            response = nat_rules_obj.get()
            if 'items' in response:
                for rule in response['items']:
                    nat_rule_list.append({
                        'id': rule.get('id', 'N/A'),
                        'name': rule.get('name', 'N/A'),
                        'type': rule.get('type', 'N/A')
                    })

    # Add the NAT Rule list to the all_objects dictionary
    all_objects['NatRules'] = nat_rule_list

    # Initialize an empty list for Device Records
    device_record_list = []

    # Fetch and populate DeviceRecords
    device_records_obj = DeviceRecords(fmc=fmc)
    response = device_records_obj.get()
    print(f"device_records_obj {response=}")

    if response and 'items' in response:
        for record in response['items']:
            device_record_list.append({
                'id': record.get('id', 'N/A'),
                'name': record.get('name', 'N/A'),
                'type': record.get('type', 'N/A'),
                'hostName': record.get('hostName', 'N/A'),
                'natID': record.get('natID', 'N/A'),
                'regKey': record.get('regKey', 'N/A'),
                'license_caps': record.get('license_caps', 'N/A'),
                'performanceTier': record.get('performanceTier', 'N/A'),
                'accessPolicy': record.get('accessPolicy', 'N/A')
            })

    # Add the Device Record list to the all_objects dictionary
    all_objects['DeviceRecords'] = device_record_list


    # # Initialize an empty list for IPv4 Static Routes
    # ipv4_static_route_list = []

    # # Fetch and populate IPv4StaticRoutes
    # ipv4_static_routes_obj = IPv4StaticRoutes(fmc=fmc)
    # ipv4_static_routes_obj.device(device_name='')
    # response = ipv4_static_routes_obj.get()
    # print(f"ipv4_static_routes_obj {response=}")

    # if response and 'items' in response:
    #     for route in response['items']:
    #         ipv4_static_route_list.append({
    #             'id': route.get('id', 'N/A'),
    #             'name': route.get('name', 'N/A'),
    #             'interfaceName': route.get('interfaceName', 'N/A'),
    #             'selectedNetworks': route.get('selectedNetworks', 'N/A'),
    #             'gateway': route.get('gateway', 'N/A'),
    #             'routeTracking': route.get('routeTracking', 'N/A'),
    #             'metricValue': route.get('metricValue', 'N/A'),
    #             'isTunneled': route.get('isTunneled', 'N/A')
    #         })

    # # Add the IPv4 Static Route list to the all_objects dictionary
    # all_objects['IPv4StaticRoutes'] = ipv4_static_route_list



# Save to JSON
json_file = 'fmc/output/all_objects.json'  # Specify the actual path where you want to save the JSON file
with open(json_file, 'w') as f:
    json.dump(all_objects, f, indent=4)


# staticroutes:
r'''
Traceback (most recent call last):
File "c:\Users\jacki\Downloads\Homelab\DC_Automation\fmc\fmc_tools\test.py", line 378, in <module>
    response = static_routes_obj.get()
            ^^^^^^^^^^^^^^^^^^^^^^^
File "C:\Users\jacki\AppData\Local\Programs\Python\Python311\Lib\site-packages\fmcapi\api_objects\apiclasstemplate.py", line 214, in get   
    if "items" not in response:
    ^^^^^^^^^^^^^^^^^^^^^^^
TypeError: argument of type 'NoneType' is not iterable
'''
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fmc\fmc_tools\old fmc obj.py

# 15. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/archive/dedup_fgt_policies_ v11.py
#*****************************************************
#     Filename: dedup_fgt_policies_ v11.py
#     Purpose: Dedup FGT FW policies using Resolved
#     Objects and write to excel for reference  
#     Date of creation: 9-27-2023
#     Author-Joe Zhu
#*****************************************************
 
import pandas as pd
from typing import List, Dict
from fortigate_api_get_objects_json_v1 import firewall_obj_dict, environ
import datetime
 
"""
Purpose of the code is to identify Fortigate policies that are identical/duplicated. All nested groups would be broken down to their member components which
are replaced with their actual values before the policy comparison.
The following policy Dict keys have been used for the comparison:
srcint
dstint
srcaddr
dstaddr
service
 
uncomment get_fgt_objects_via_api.py if anything changed at the FGT FW
To do:
need to deal with zone based if need be
need to deal with all type of protocol for service, currently only TCP/UDP/SCTP
"""
 
def resolve_intf_to_zone(name: str,
                         zones: List[Dict]) -> List[str]:
    # Initialize an empty list to store the resolved values
    resolved_zones = []
   
    # Check if the name exists in zones objects
    for zone in zones:
        if zone['name'] == name:
            resolved_zones.append(zone['name'])
    return resolved_zones
 
def resolve_addr_to_value(name: str,
                     address_objects: List[Dict],
                     address_groups: List[Dict[str, List[Dict[str, str]]]]) -> List[str]:
    # Initialize an empty list to store the resolved values
    values = []
   
    # Check if the name exists in address_objects
    for obj in address_objects:
        if obj['name'] == name:
            # Handle different types of addresses
            if obj.get('type') == 'ipmask':
                subnet = obj.get('subnet', '')
                # Split subnet mask into octets
                prefix = subnet.split()[0]
                subnet_mask_octets = subnet.split()[1].split('.')
                # Calculate the CIDR prefix length based on the subnet mask
                prefix_length = sum(bin(int(octet)).count('1') for octet in subnet_mask_octets)
                values.append(f"{prefix}/{prefix_length}")
            elif obj.get('type') == 'iprange':
                values.append(f"{obj.get('start-ip', '')}-{obj.get('end-ip', '')}")
            elif obj.get('type') in ['fqdn', 'dynamic']:
                values.append(obj.get('name', ''))
            return values
   
    # Check if the name exists in address_groups
    for group in address_groups:
        if group['name'] == name:
            # For each member, recursively resolve it to its value
            for member in group['member']:
                values += resolve_addr_to_value(member['name'], address_objects, address_groups)
            return values
   
    # If the name does not exist in either, return an empty list
    return values
 
# Define a function to resolve services to their respective port ranges
def resolve_service_to_ports(name: str,
                             service_objects: List[Dict],
                             service_groups: List[Dict[str, List[Dict[str, str]]]]) -> List[str]:
    # Initialize an empty list to store the resolved port ranges
    port_ranges = []
   
    # Check if the name exists in service_objects
    for service in service_objects:
        if service['name'] == name:
            protocol = service.get('protocol', '')
            tcp_range = service.get('tcp-portrange', '')
            udp_range = service.get('udp-portrange', '')
            sctp_range = service.get('sctp-portrange', '')
            icmptype = str(service.get('icmptype', ''))
            icmpcode = str(service.get('icmpcode', ''))
            if protocol == 'TCP/UDP/SCTP' and tcp_range:
                port_ranges.append(f"TCP/{tcp_range}")
                if int(service['session-ttl']) > 0:
                    print(f"TCP/{service['name']=} {service['session-ttl']=}")
                    port_ranges.pop()
                    port_ranges.append(f"TCP/{tcp_range}_{service['session-ttl']}")
            if protocol == 'TCP/UDP/SCTP' and udp_range:
                port_ranges.append(f"UDP/{udp_range}")
            if protocol == 'TCP/UDP/SCTP' and sctp_range:  
                port_ranges.append(f"SCTP/{sctp_range}")
            if protocol == 'ICMP':
                port_ranges.append(f"ICMP_{icmptype}/{icmpcode}")
            if protocol == 'IP':
                port_ranges.append(f"IP_{service['name']}_{service['protocol-number']}")
                # print(f"IP service: IP_{service['name']}_{service['protocol-number']}")
            if protocol == 'ALL':
                port_ranges.append(f"ALL_{service['name']}")
                print(f"ALL {service=}")
            # else:
            #     port_ranges.append(f"{service['name']}")
            #     print(f"WHAT {service=}")
            return port_ranges
   
    # Check if the name exists in service_groups
    for group in service_groups:
        if group['name'] == name:
            # For each member, recursively resolve it to its port ranges
            for member in group['member']:
                port_ranges += resolve_service_to_ports(member['name'], service_objects, service_groups)
            return port_ranges
   
    # If the name does not exist in either, return an empty list
    return port_ranges
 
# Function to resolve source and destination addresses, and services in policies
def resolve_policy(policies: List[Dict],
                   address_objects: List[Dict],
                   address_groups: List[Dict],
                   service_objects: List[Dict],
                   service_groups: List[Dict],
                   intf_objects: List[Dict]) -> List[Dict]:
    # Initialize an empty list to store the updated policies
    updated_policies = []
   
    # Loop through each policy
    for policy in policies:
        updated_policy = policy.copy()  # Copy existing policy to avoid modifying the original
        resolved_src_addresses = []
        resolved_dst_addresses = []
        resolved_services = []
        resolved_srcintf = []
        resolved_dstintf = []
 
        # Loop through each source address in the policy
        for address in policy.get('srcaddr', []):
            # Resolve each source address to its values
            values = resolve_addr_to_value(address['name'], address_objects, address_groups)
            resolved_src_addresses.extend(values)
       
        # Loop through each destination address in the policy
        for address in policy.get('dstaddr', []):
            # Resolve each destination address to its values
            values = resolve_addr_to_value(address['name'], address_objects, address_groups)
            resolved_dst_addresses.extend(values)
 
        # Loop through each service in the policy
        for service in policy.get('service', []):
            # Resolve each service to its port ranges
            port_ranges = resolve_service_to_ports(service['name'], service_objects, service_groups)
            resolved_services.extend(port_ranges)
       
        # Loop through each source interfaces in the policy
        for srcintf in policy.get('srcintf', []):
            # Resolve each source interface to zone name
            srczone = resolve_intf_to_zone(srcintf['name'], zones)
            resolved_srcintf.extend(srczone)
        for dstintf in policy.get('dstintf', []):
            # Resolve each dst interface to zone name
            dstzone = resolve_intf_to_zone(dstintf['name'], zones)
            resolved_dstintf.extend(dstzone)
 
        # Update the 'srcint','srcaddr', 'dstaddr', and 'service' fields in the policy
        updated_policy['resolved_srcaddr'] = list(set(resolved_src_addresses))
        updated_policy['resolved_dstaddr'] = list(set(resolved_dst_addresses))
        updated_policy['resolved_service'] = list(set(resolved_services))
        updated_policy['resolved_srcintf'] = list(set(resolved_srcintf))
        updated_policy['resolved_dstintf'] = list(set(resolved_dstintf))
        updated_policies.append(updated_policy)
   
    return updated_policies
 
def write_to_excel(duplicates, filename):    
    # Get the current date and time
    current_datetime = datetime.datetime.now()
 
    # Format the date and time as a string in the desired format
    suffix = current_datetime.strftime("%Y_%m_%d_%H_%M")
 
    # Add the suffix to the filename
    excel_file_name = filename.replace('.', f'_{suffix}.')
 
    all_duplicate_policies = []
    all_to_remove_policies = []
   
    # Loop through each tuple in the list and accumulate all policies
    for duplicate_policies, to_remove_policies in duplicates:
        all_duplicate_policies.append(duplicate_policies)
        all_to_remove_policies.append(to_remove_policies)
 
    # Convert lists of dictionaries to DataFrames
    duplicate_df = pd.DataFrame(all_duplicate_policies)
    to_remove_df = pd.DataFrame(all_to_remove_policies)
 
    # Keep only the columns that we are interested in
    columns_to_keep = ['policyid', 'srcintf', 'dstintf', 'srcaddr', 'dstaddr', 'service', 'action', 'comments',
                       'resolved_srcintf', 'resolved_dstintf', 'resolved_srcaddr', 'resolved_dstaddr', 'resolved_service']
 
    # Add a reference column next to 'policyid' referencing the policyid of the other tuple element
    duplicate_df['reference_policyid'] = to_remove_df['policyid'].values
    to_remove_df['reference_policyid'] = duplicate_df['policyid'].values
 
    # Reorder columns to have 'policyid' and 'reference_policyid' at the beginning
    columns_order = ['policyid', 'reference_policyid'] + columns_to_keep[1:]
    duplicate_df = duplicate_df[columns_order]
    to_remove_df = to_remove_df[columns_order]
   
    # Create a Pandas Excel writer using XlsxWriter as the engine
    with pd.ExcelWriter(excel_file_name, engine='openpyxl') as writer:
        # Write DataFrames to Excel sheets
        duplicate_df.to_excel(writer, sheet_name='Duplicate', index=False)
        to_remove_df.to_excel(writer, sheet_name='2bRemoved', index=False)
 
# This function should take two policies as input and return True if they are identical
# (ignoring names and considering the flattened address and service groups), and False otherwise.
def policies_are_identical(policy1, policy2):
    """
    Checks whether two policies are identical.
 
    Arguments:
    policy1, policy2 -- dictionaries representing the policies to compare.
    Returns True if the policies are identical, and False otherwise.
    """
    return (
        set(policy1["resolved_srcaddr"]) == set(policy2["resolved_srcaddr"])
        and set(policy1["resolved_dstaddr"]) == set(policy2["resolved_dstaddr"])
        and set(policy1["resolved_service"]) == set(policy2["resolved_service"])
        and set(policy1["resolved_srcintf"]) == set(policy2["resolved_srcintf"])
        and set(policy1["resolved_dstintf"]) == set(policy2["resolved_dstintf"])
    )
 
# Use these functions to deduplicate your list of policies. You can do this with a simple nested loop: for each policy, check if it is identical to any of
# the policies that come after it in the list.
# If it is, remove the duplicate. To avoid modifying the list while you're iterating over it, you can create a new list to hold the deduplicated policies.
 
def get_duplicate_policies(policies):
    """Removes duplicate policies from a list of policies.
 
    Args:
        policies (list): List of policies to deduplicate.
 
    Returns:
        tuple: Tuple containing a list of deduplicated policies and a list of duplicates.
 
    """
    deduplicated_policies = []
    duplicates = []
 
    for i in range(len(policies)):
        is_duplicate = False
        for j in range(i+1, len(policies)): # avoid recursive comparison
            if policies_are_identical(policies[i], policies[j]):
                duplicates.append((policies[i], policies[j]))  # Save removed/duplicated policy and survived policy
                is_duplicate = True
                break
        if not is_duplicate:
            deduplicated_policies.append(policies[i])
 
    return deduplicated_policies, duplicates
 
# def main():
fpath = 'fortigate/output'
resolved_policies_output = f"{fpath}/{environ}_resolved_policies.txt"
script_to_get_polid_disabled = f"{fpath}/{environ}_script_to_get_polid_disabled.txt"
output_excel_file_for_validation = f'{fpath}/{environ}_FGT_policy_dedupd.xlsx'
 
# build list of dictionaries
interfaces = firewall_obj_dict['interfaces']
addresses = firewall_obj_dict['addresses']
addrgroups = firewall_obj_dict['addrgroups']
services = firewall_obj_dict['services']
servicegrps = firewall_obj_dict['servicegrps']
policies = firewall_obj_dict['policies']
ippools = firewall_obj_dict['ippools']
routes = firewall_obj_dict['routes']
zones = firewall_obj_dict['zones']
# Add the directory containing your script to the Python path
# sys.path.append(f"{fpath}")
 
# Now you can import your script as a module
# import fortigate_api_get_objects_json # this actually runs it!!!
# get_fgt_objects_via_api.run()
 
# populate policies with updated src/dst/svc/srcintf/dstintf
resolved_policies = resolve_policy(policies, addresses, addrgroups, services, servicegrps, interfaces)
 
# write resolved policies to file
with open(resolved_policies_output,'w') as f:
    f.write(f"Resolved Policies:\n{str(resolved_policies)}")
 
deduplicated_policies, duplicated_policies = get_duplicate_policies(resolved_policies)
# print(f"{deduplicated_policies=}")
 
# replace policies components with their actual values for visual examination:
 
print(f"\nTotal number of policies: {len(resolved_policies)}:\n")
# print('\ndeduplicated_policies:\n')
# for pol in deduplicated_policies:
#     print(pol[f'policyid'])
# print(f'{duplicated_policies=}')
 
print(f'\nduplicated_policies: total of {len(duplicated_policies)}\n')
 
for search_pol,dup_pol in duplicated_policies:
    print(f"Search policy ID: {search_pol['policyid']}, Duplicated policy ID: {dup_pol['policyid']}")
 
# policy IDs to be disabled:
policyids_for_disable = list()
for _,pol in duplicated_policies: # second policyids in the tuple are candidates for disable, since first policyids only compare once sequentially in the policy list
    policyids_for_disable.append(pol['policyid'])
if policyids_for_disable:
    print(f"\nPolicy IDs to be disabled (total:{len(set(policyids_for_disable))}):\n")
    for i in sorted(set(policyids_for_disable)):
        print(f"{i}")
 
# create FGT change script to get the duplicated policies disabled
with open(script_to_get_polid_disabled, 'w') as f:
    f.write('config vdom\nedit PP-EIG-T23\nconfig firewall policy\n')
    for polid in policyids_for_disable:
        f.write(f'edit {polid}\nset status disable\nnext\n')
    f.write(f'end\nend\n')
write_to_excel(duplicated_policies, output_excel_file_for_validation)
 
# if __name__ == "__main__":
#     main()
 
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\archive\dedup_fgt_policies_ v11.py

# 16. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/archive/fortigatepolicymanager.py
import pandas as pd
import datetime
from typing import List, Dict
from fortigate_api_get_objects_json_v1 import firewall_obj_dict, environ

class FortigatePolicyManager:
    def __init__(self):
        self.interfaces = firewall_obj_dict['interfaces']
        self.addresses = firewall_obj_dict['addresses']
        self.addrgroups = firewall_obj_dict['addrgroups']
        self.services = firewall_obj_dict['services']
        self.servicegrps = firewall_obj_dict['servicegrps']
        self.policies = firewall_obj_dict['policies']
        self.ippools = firewall_obj_dict['ippools']
        self.routes = firewall_obj_dict['routes']
        self.zones = firewall_obj_dict['zones']
        self.fpath = 'fortigate/output'
        self.resolved_policies_output = f"{self.fpath}/{environ}_resolved_policies.txt"
        self.script_to_get_polid_disabled = f"{self.fpath}/{environ}_script_to_get_polid_disabled.txt"
        self.output_excel_file_for_validation = f'{self.fpath}/{environ}_FGT_policy_dedupd.xlsx'

    def resolve_intf_to_zone(self, name: str, zones: List[Dict]) -> List[str]:
        # Your existing code
        pass

    def resolve_addr_to_value(self, name: str, address_objects: List[Dict], address_groups: List[Dict[str, List[Dict[str, str]]]]) -> List[str]:
        # Your existing code
        pass

    def resolve_service_to_ports(self, name: str, service_objects: List[Dict], service_groups: List[Dict[str, List[Dict[str, str]]]]) -> List[str]:
        # Your existing code
        pass

    def resolve_policy(self, policies: List[Dict], address_objects: List[Dict], address_groups: List[Dict], service_objects: List[Dict], service_groups: List[Dict], intf_objects: List[Dict]) -> List[Dict]:
        # Your existing code
        pass

    def write_to_excel(self, duplicates, filename):
        # Your existing code
        pass

    def policies_are_identical(self, policy1, policy2):
        # Your existing code
        pass

    def get_duplicate_policies(self, policies):
        # Your existing code
        pass

    def run(self):
        resolved_policies = self.resolve_policy(self.policies, self.addresses, self.addrgroups, self.services, self.servicegrps, self.interfaces)
        with open(self.resolved_policies_output,'w') as f:
            f.write(f"Resolved Policies:\n{str(resolved_policies)}")
        deduplicated_policies, duplicated_policies = self.get_duplicate_policies(resolved_policies)
        self.write_to_excel(duplicated_policies, self.output_excel_file_for_validation)

if __name__ == "__main__":
    manager = FortigatePolicyManager()
    manager.run()

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\archive\fortigatepolicymanager.py

# 17. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/archive/policy_manager.py
from common.utils import Environment_Task_Manager, deep_diff, deduplicate

class PolicyManager:
    def __init__(self, credentials):
        self.username = credentials['username']
        self.password = credentials['password']
        self.host = credentials['host']
        self.policies = []

    def deduplicate_policies(self):
        deduplicate(self.policies)

    def deep_diff(self):
        deep_diff({"key": "value"}, {"key": "new_value"})


# Usage
env_manager = Environment_Task_Manager('config/environment.yml', 'config/tasks.yml')
selected_env = env_manager.get_env()
selected_task = env_manager.get_task()

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\archive\policy_manager.py

# 18. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/archive/run_commands_FGT_v1.py
#*****************************************************
#     Filename: run_commands_FGT_v1.py
#     Purpose: Run arbitary FGT CLI and display results
#     Date of creation: 8-20-2023
#     Author-Joe Zhu
#*****************************************************
 
import paramiko
import time
import yaml
import select
import datetime
import os
import sys
sys.path.append('C:/Users/s4739693/MyPythonProj')
from utils.menu_tools import get_env_options
 
""""
If output gets cut off, go to send_command(), make sure use receive_all_data() for output; then in receive_all_data() adjust the buffer size as needed.
"""
def save_output_to_file(output):
    timestamp = datetime.datetime.now().strftime("%Y_%b_%d_%H_%M_%S")
    filename = f"output\\output_{timestamp}.txt"
 
    with open(filename, "w") as file:
        file.write(output)
 
def run_commands(fortigate_ip, username, password, commands_string, send_per_command=False):
    """
    Connect to the FortiGate device and run commands.
 
    Args:
        fortigate_ip (str): IP address of the FortiGate device.
        username (str): Username for SSH login.
        password (str): Password for SSH login.
        commands_string (str): String containing the commands to be executed.
        send_per_command (bool, optional): If True, sends commands one by one.
                                          If False, sends all commands in a single batch.
 
    Returns:
        None
    """
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(fortigate_ip, username=username, password=password)
        chan = ssh.invoke_shell()
 
        if send_per_command:
            cmds = get_commands_string(commands_string)
            for cmd in cmds:
                send_command(chan, cmd)
        else:
            send_command(chan, commands_string)
 
        ssh.close()
    except paramiko.AuthenticationException:
        print("Authentication failed. Please check your credentials.")
    except paramiko.SSHException as ssh_ex:
        print(f"SSH connection error: {ssh_ex}")
    except Exception as ex:
        print(f"Error: {ex}")
 
def receive_all_data(chan):
    """
    Receive all data from the SSH channel.
 
    This function continuously reads data from the SSH channel until there is no more data available.
    It ensures that all data is received, even if the output size is larger than the specified buffer size.
 
    Args:
        chan (paramiko.Channel): Paramiko channel object for SSH communication.
 
    Returns:
        str: The received data as a decoded string.
 
    Raises:
        paramiko.SSHException: If there is an issue with the SSH channel.
        UnicodeDecodeError: If there is an error decoding the received data.
 
    Example:
        # Assuming 'chan' is the SSH channel
        output = receive_all_data(chan)
    """
    # buffer adjustable per the need
    buffer_size = 99999
    data = b""
    while True:
        try:
            # Use select to check if there is data available to be received
            readable, _, _ = select.select([chan], [], [], 0.1)
            if not readable:
                # No data available, break the loop
                break
 
            chunk = chan.recv(buffer_size)
        except paramiko.SSHException as ssh_ex:
            raise ssh_ex
        except Exception as ex:
            raise ex
 
        if not chunk:
            break
        data += chunk
    return data.decode()
 
def send_command(chan, command):
    """
    Send a command over the SSH channel and print the output.
 
    Args:
        chan (paramiko.Channel): Paramiko channel object for SSH communication.
        command (str): Command to be sent.
 
    Returns:
        None
    """
    chan.send(f"{command}\n")
    time.sleep(1)
    # output = chan.recv(99999).decode() # use this line of code a fallback if the next line not work!!!
    output = receive_all_data(chan)
 
    print(output)
    save_output_to_file(output)
 
def get_commands_string(commands_string):
    """
    Split the commands string into individual commands.
 
    Args:
        commands_string (str): String containing multiple commands.
 
    Returns:
        list: List of individual commands.
    """
    cmds = commands_string.splitlines()
    cmds = [cmd.strip() for cmd in cmds]
    return cmds
 
# Function to load configuration from YAML file
def load_config(config_file, env):
    """
    Load configuration parameters from a YAML file based on the specified env.
 
    Args:
        config_file (str): Path to the YAML configuration file.
        env (str): env name to load the configuration for.
 
    Returns:
        dict: A dictionary containing the configuration parameters for the given env.
    """
    with open(config_file, 'r') as file:
        config = yaml.safe_load(file)
    return config.get(env, {})
 
def main():
    # print(os.getcwd())
    config_file = "explore/IGW/config.yaml"
 
    while True:
        print("Please choose your environment:")
       
        # Get the env options dynamically from the config.yaml
        env_options = get_env_options(config_file)
 
        for i, env in enumerate(env_options, 1):
            print(f"{i}. {env.upper()}")
 
        user_input = input('Please enter your choice (e.g. 1 or 2 or 1,2 or q to quit): ')
        user_input = user_input.replace(" ", "").split(",")
 
        should_exit = False  # Flag to indicate if the user wants to quit the program
 
        for input_item in user_input:
            if input_item.isdigit():
                index = int(input_item)
                if 1 <= index <= len(env_options):
                    # Get the chosen env
                    env = env_options[index - 1]
                    config_data = load_config(config_file, env)
                    run_commands(**config_data)
                else:
                    print("Invalid env choice. Please try again!\n")
                    break  # Exit the for loop and re-prompt the user
            elif input_item.lower() == 'q':
                should_exit = True
                break  # Exit the for loop and terminate the program gracefully
            else:
                print("Invalid input. Please try again!\n")
                break  # Exit the for loop and re-prompt the user
 
        if should_exit:
            break  # Exit the while loop and terminate the program
 
if __name__ == '__main__':
    main()
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\archive\run_commands_FGT_v1.py

# 19. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/fortigateobjectmanager.py
#*****************************************************
#     Filename: fortigateobjectmanager.py
#     Purpose: Generate FGT Object Dictionary
#     Date of creation: 9-01-2023
#     Author-Joe Zhu
#*****************************************************
#  C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\fortigateobjectmanager.py
# based upon https://github.com/vladimirs-git/fortigate-api/tree/main
import json
from fortigate_api import FortigateAPI

class FortigateObjectManager:
    def __init__(self, env, cred):
        self.selected_env = env
        self.cred = cred
        self.vdom = cred['vdom']
        self.fgt_obj_output = f"fortigate/output/{self.selected_env}_{self.vdom}_objects.json"
        self.fgt = FortigateAPI(**self.cred)
        self.firewall_obj_dict = {}
        
    def fetch_objects(self):
        # Fetch various object types
        self.firewall_obj_dict = {
            'interfaces': self.fgt.interface.get(),
            'addresses': self.fgt.address.get(),
            'addrgroups': self.fgt.address_group.get(),
            'services': self.fgt.service.get(),
            'servicegrps': self.fgt.service_group.get(),
            'policies': self.fgt.policy.get(),
            'ippools': self.fgt.ip_pool.get(),
            'routes': self.fgt.static_route.get(),
            'zones': self.fgt.zone.get(),
        }
        
    def write_to_file(self):
        with open(self.fgt_obj_output, "w") as output_file:
            json.dump(self.firewall_obj_dict, output_file, indent=4)
                
    def run(self):
        self.fetch_objects()
        self.write_to_file()

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\fortigateobjectmanager.py

# 20. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/fortigate_policy_manager.py
#*****************************************************
#     Filename: fortigate_policy_manager.py
#     Purpose: Dedup FGT FW policies using Resolved
#     Objects and write to excel for reference  
#     Date of creation: 9-27-2023
#     Author-Joe Zhu
#*****************************************************
 
import pandas as pd
from typing import List, Dict
import datetime
 
"""
Purpose of the code is to identify Fortigate policies that are identical/duplicated. All nested groups would be broken down to their member components which
are replaced with their actual values before the policy comparison.
The following policy Dict keys have been used for the comparison:
srcint
dstint
srcaddr
dstaddr
service
 
uncomment get_fgt_objects_via_api.py if anything changed at the FGT FW
To do:
need to deal with zone based if need be
need to deal with all type of protocol for service, currently only TCP/UDP/SCTP
"""


class FortigatePolicyManager:
    def __init__(self, firewall_obj_dict, selected_env_name):
        self.interfaces = firewall_obj_dict['interfaces']
        self.addresses = firewall_obj_dict['addresses']
        self.addrgroups = firewall_obj_dict['addrgroups']
        self.services = firewall_obj_dict['services']
        self.servicegrps = firewall_obj_dict['servicegrps']
        self.policies = firewall_obj_dict['policies']
        self.ippools = firewall_obj_dict['ippools']
        self.routes = firewall_obj_dict['routes']
        self.zones = firewall_obj_dict['zones']
        self.environ = selected_env_name
        self.fpath = 'fortigate/output'
        self.resolved_policies_output = f"{self.fpath}/{self.environ}_resolved_policies.txt"
        self.script_to_get_polid_disabled = f"{self.fpath}/{self.environ}_script_to_get_polid_disabled.txt"
        self.output_excel_file_for_validation = f'{self.fpath}/{self.environ}_FGT_policy_dedupd.xlsx'

    def resolve_intf_to_zone(self, name: str,
                         zones: List[Dict]) -> List[str]:
        # Initialize an empty list to store the resolved values
        resolved_zones = []
        # Check if the name exists in zones objects
        for zone in zones:
            if zone['name'] == name:
                resolved_zones.append(zone['name'])
        return resolved_zones

    def resolve_addr_to_value(self, name: str,
                     address_objects: List[Dict],
                     address_groups: List[Dict[str, List[Dict[str, str]]]]) -> List[str]:
        # Initialize an empty list to store the resolved values
        values = []
    
        # Check if the name exists in address_objects
        for obj in address_objects:
            if obj['name'] == name:
                # Handle different types of addresses
                if obj.get('type') == 'ipmask':
                    subnet = obj.get('subnet', '')
                    # Split subnet mask into octets
                    prefix = subnet.split()[0]
                    subnet_mask_octets = subnet.split()[1].split('.')
                    # Calculate the CIDR prefix length based on the subnet mask
                    prefix_length = sum(bin(int(octet)).count('1') for octet in subnet_mask_octets)
                    values.append(f"{prefix}/{prefix_length}")
                elif obj.get('type') == 'iprange':
                    values.append(f"{obj.get('start-ip', '')}-{obj.get('end-ip', '')}")
                elif obj.get('type') in ['fqdn', 'dynamic']:
                    values.append(obj.get('name', ''))
                return values
            # Check if the name exists in address_groups
        for group in address_groups:
            if group['name'] == name:
                # For each member, recursively resolve it to its value
                for member in group['member']:
                    values += self.resolve_addr_to_value(member['name'], address_objects, address_groups)
                return values
    
        # If the name does not exist in either, return an empty list
        return values
    

    def resolve_service_to_ports(self, name: str,
                             service_objects: List[Dict],
                             service_groups: List[Dict[str, List[Dict[str, str]]]]) -> List[str]:
        # Initialize an empty list to store the resolved port ranges
        port_ranges = []
    
        # Check if the name exists in service_objects
        for service in service_objects:
            if service['name'] == name:
                protocol = service.get('protocol', '')
                tcp_range = service.get('tcp-portrange', '')
                udp_range = service.get('udp-portrange', '')
                sctp_range = service.get('sctp-portrange', '')
                icmptype = str(service.get('icmptype', ''))
                icmpcode = str(service.get('icmpcode', ''))
                if protocol == 'TCP/UDP/SCTP' and tcp_range:
                    port_ranges.append(f"TCP/{tcp_range}")
                    if int(service['session-ttl']) > 0:
                        print(f"TCP/{service['name']=} {service['session-ttl']=}")
                        port_ranges.pop()
                        port_ranges.append(f"TCP/{tcp_range}_{service['session-ttl']}")
                if protocol == 'TCP/UDP/SCTP' and udp_range:
                    port_ranges.append(f"UDP/{udp_range}")
                if protocol == 'TCP/UDP/SCTP' and sctp_range:  
                    port_ranges.append(f"SCTP/{sctp_range}")
                if protocol == 'ICMP':
                    port_ranges.append(f"ICMP_{icmptype}/{icmpcode}")
                if protocol == 'IP':
                    port_ranges.append(f"IP_{service['name']}_{service['protocol-number']}")
                    # print(f"IP service: IP_{service['name']}_{service['protocol-number']}")
                if protocol == 'ALL':
                    port_ranges.append(f"ALL_{service['name']}")
                    print(f"ALL {service=}")
                # else:
                #     port_ranges.append(f"{service['name']}")
                #     print(f"WHAT {service=}")
                return port_ranges
    
        # Check if the name exists in service_groups
        for group in service_groups:
            if group['name'] == name:
                # For each member, recursively resolve it to its port ranges
                for member in group['member']:
                    port_ranges += self.resolve_service_to_ports(member['name'], service_objects, service_groups)
                return port_ranges
    
        # If the name does not exist in either, return an empty list
        return port_ranges

    def resolve_policy(self, policies: List[Dict],
                   address_objects: List[Dict],
                   address_groups: List[Dict],
                   service_objects: List[Dict],
                   service_groups: List[Dict],
                   intf_objects: List[Dict]) -> List[Dict]:
        # Initialize an empty list to store the updated policies
        updated_policies = []
    
        # Loop through each policy
        for policy in policies:
            updated_policy = policy.copy()  # Copy existing policy to avoid modifying the original
            resolved_src_addresses = []
            resolved_dst_addresses = []
            resolved_services = []
            resolved_srcintf = []
            resolved_dstintf = []
    
            # Loop through each source address in the policy
            for address in policy.get('srcaddr', []):
                # Resolve each source address to its values
                values = self.resolve_addr_to_value(address['name'], address_objects, address_groups)
                resolved_src_addresses.extend(values)
        
            # Loop through each destination address in the policy
            for address in policy.get('dstaddr', []):
                # Resolve each destination address to its values
                values = self.resolve_addr_to_value(address['name'], address_objects, address_groups)
                resolved_dst_addresses.extend(values)
    
            # Loop through each service in the policy
            for service in policy.get('service', []):
                # Resolve each service to its port ranges
                port_ranges = self.resolve_service_to_ports(service['name'], service_objects, service_groups)
                resolved_services.extend(port_ranges)
        
            # Loop through each source interfaces in the policy
            for srcintf in policy.get('srcintf', []):
                # Resolve each source interface to zone name
                srczone = self.resolve_intf_to_zone(srcintf['name'], self.zones)
                resolved_srcintf.extend(srczone)
            for dstintf in policy.get('dstintf', []):
                # Resolve each dst interface to zone name
                dstzone = self.resolve_intf_to_zone(dstintf['name'], self.zones)
                resolved_dstintf.extend(dstzone)
    
            # Update the 'srcint','srcaddr', 'dstaddr', and 'service' fields in the policy
            updated_policy['resolved_srcaddr'] = list(set(resolved_src_addresses))
            updated_policy['resolved_dstaddr'] = list(set(resolved_dst_addresses))
            updated_policy['resolved_service'] = list(set(resolved_services))
            updated_policy['resolved_srcintf'] = list(set(resolved_srcintf))
            updated_policy['resolved_dstintf'] = list(set(resolved_dstintf))
            updated_policies.append(updated_policy)
    
        return updated_policies
    
    def write_to_excel(self, duplicates, filename):    
        # Get the current date and time
        current_datetime = datetime.datetime.now()
    
        # Format the date and time as a string in the desired format
        suffix = current_datetime.strftime("%Y_%m_%d_%H_%M")
    
        # Add the suffix to the filename
        excel_file_name = filename.replace('.', f'_{suffix}.')
    
        all_duplicate_policies = []
        all_to_remove_policies = []
    
        # Loop through each tuple in the list and accumulate all policies
        for duplicate_policies, to_remove_policies in duplicates:
            all_duplicate_policies.append(duplicate_policies)
            all_to_remove_policies.append(to_remove_policies)
    
        # Convert lists of dictionaries to DataFrames
        duplicate_df = pd.DataFrame(all_duplicate_policies)
        to_remove_df = pd.DataFrame(all_to_remove_policies)
    
        # Keep only the columns that we are interested in
        columns_to_keep = ['policyid', 'srcintf', 'dstintf', 'srcaddr', 'dstaddr', 'service', 'action', 'comments',
                        'resolved_srcintf', 'resolved_dstintf', 'resolved_srcaddr', 'resolved_dstaddr', 'resolved_service']
    
        # Add a reference column next to 'policyid' referencing the policyid of the other tuple element
        duplicate_df['reference_policyid'] = to_remove_df['policyid'].values
        to_remove_df['reference_policyid'] = duplicate_df['policyid'].values
    
        # Reorder columns to have 'policyid' and 'reference_policyid' at the beginning
        columns_order = ['policyid', 'reference_policyid'] + columns_to_keep[1:]
        duplicate_df = duplicate_df[columns_order]
        to_remove_df = to_remove_df[columns_order]
    
        # Create a Pandas Excel writer using XlsxWriter as the engine
        with pd.ExcelWriter(excel_file_name, engine='openpyxl') as writer:
            # Write DataFrames to Excel sheets
            duplicate_df.to_excel(writer, sheet_name='Duplicate', index=False)
            to_remove_df.to_excel(writer, sheet_name='2bRemoved', index=False)
    
    # This function should take two policies as input and return True if they are identical
    # (ignoring names and considering the flattened address and service groups), and False otherwise.
    def policies_are_identical(self, policy1, policy2):
        """
        Checks whether two policies are identical.
    
        Arguments:
        policy1, policy2 -- dictionaries representing the policies to compare.
        Returns True if the policies are identical, and False otherwise.
        """
        return (
            set(policy1["resolved_srcaddr"]) == set(policy2["resolved_srcaddr"])
            and set(policy1["resolved_dstaddr"]) == set(policy2["resolved_dstaddr"])
            and set(policy1["resolved_service"]) == set(policy2["resolved_service"])
            and set(policy1["resolved_srcintf"]) == set(policy2["resolved_srcintf"])
            and set(policy1["resolved_dstintf"]) == set(policy2["resolved_dstintf"])
        )
    
    # Use these functions to deduplicate your list of policies. You can do this with a simple nested loop: for each policy, check if it is identical to any of
    # the policies that come after it in the list.
    # If it is, remove the duplicate. To avoid modifying the list while you're iterating over it, you can create a new list to hold the deduplicated policies.
    
    def get_duplicate_policies(self, policies):
        """Removes duplicate policies from a list of policies.
    
        Args:
            policies (list): List of policies to deduplicate.
    
        Returns:
            tuple: Tuple containing a list of deduplicated policies and a list of duplicates.
    
        """
        deduplicated_policies = []
        duplicates = []
    
        for i in range(len(policies)):
            is_duplicate = False
            for j in range(i+1, len(policies)): # avoid recursive comparison
                if self.policies_are_identical(policies[i], policies[j]):
                    duplicates.append((policies[i], policies[j]))  # Save removed/duplicated policy and survived policy
                    is_duplicate = True
                    break
            if not is_duplicate:
                deduplicated_policies.append(policies[i])
    
        return deduplicated_policies, duplicates
 

    def run(self):
        resolved_policies = self.resolve_policy(self.policies, self.addresses, self.addrgroups, self.services, self.servicegrps, self.interfaces)
        with open(self.resolved_policies_output,'w') as f:
            f.write(f"Resolved Policies:\n{str(resolved_policies)}")
        deduplicated_policies, duplicated_policies = self.get_duplicate_policies(resolved_policies)
        self.write_to_excel(duplicated_policies, self.output_excel_file_for_validation)

if __name__ == "__main__":
    manager = FortigatePolicyManager()
    manager.run()


   
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\fortigate_policy_manager.py

# 21. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/fortigate_policy_manager_interface.py
#*****************************************************
#     Filename: fortigate_policy_manager.py
#     Purpose: Dedup FGT FW policies using Resolved
#     Objects and write to excel for reference  
#     Date of creation: 9-27-2023
#     Author-Joe Zhu
#*****************************************************
 
import pandas as pd
from typing import List, Dict
import datetime
 
"""
Purpose of the code is to identify Fortigate policies that are identical/duplicated. All nested groups would be broken down to their member components which
are replaced with their actual values before the policy comparison.
The following policy Dict keys have been used for the comparison:
srcint
dstint
srcaddr
dstaddr
service
 
uncomment get_fgt_objects_via_api.py if anything changed at the FGT FW
To do:
need to deal with zone based if need be
need to deal with all type of protocol for service, currently only TCP/UDP/SCTP
"""


class FortigatePolicyManager:
    def __init__(self, firewall_obj_dict, selected_env_name):
        self.interfaces = firewall_obj_dict['interfaces']
        self.addresses = firewall_obj_dict['addresses']
        self.addrgroups = firewall_obj_dict['addrgroups']
        self.services = firewall_obj_dict['services']
        self.servicegrps = firewall_obj_dict['servicegrps']
        self.policies = firewall_obj_dict['policies']
        self.ippools = firewall_obj_dict['ippools']
        self.routes = firewall_obj_dict['routes']
        self.environ = selected_env_name
        self.fpath = 'fortigate/output'
        self.resolved_policies_output = f"{self.fpath}/{self.environ}_resolved_policies.txt"
        self.script_to_get_polid_disabled = f"{self.fpath}/{self.environ}_script_to_get_polid_disabled.txt"
        self.output_excel_file_for_validation = f'{self.fpath}/{self.environ}_FGT_policy_dedupd.xlsx'

    
    def resolve_intf(self, name: str,
                         interfaces: List[Dict]) -> List[str]:
        # Initialize an empty list to store the resolved values
        resolved_interfaces = []
        # Check if the name exists in interfaces objects
        for int in interfaces:
            if int['name'] == name:
                resolved_interfaces.append(int['name'])
        return resolved_interfaces


    def resolve_addr_to_value(self, name: str,
                     address_objects: List[Dict],
                     address_groups: List[Dict[str, List[Dict[str, str]]]]) -> List[str]:
        # Initialize an empty list to store the resolved values
        values = []
    
        # Check if the name exists in address_objects
        for obj in address_objects:
            if obj['name'] == name:
                # Handle different types of addresses
                if obj.get('type') == 'ipmask':
                    subnet = obj.get('subnet', '')
                    # Split subnet mask into octets
                    prefix = subnet.split()[0]
                    subnet_mask_octets = subnet.split()[1].split('.')
                    # Calculate the CIDR prefix length based on the subnet mask
                    prefix_length = sum(bin(int(octet)).count('1') for octet in subnet_mask_octets)
                    values.append(f"{prefix}/{prefix_length}")
                elif obj.get('type') == 'iprange':
                    values.append(f"{obj.get('start-ip', '')}-{obj.get('end-ip', '')}")
                elif obj.get('type') in ['fqdn', 'dynamic']:
                    values.append(obj.get('name', ''))
                return values
            # Check if the name exists in address_groups
        for group in address_groups:
            if group['name'] == name:
                # For each member, recursively resolve it to its value
                for member in group['member']:
                    values += self.resolve_addr_to_value(member['name'], address_objects, address_groups)
                return values
    
        # If the name does not exist in either, return an empty list
        return values
    

    def resolve_service_to_ports(self, name: str,
                             service_objects: List[Dict],
                             service_groups: List[Dict[str, List[Dict[str, str]]]]) -> List[str]:
        # Initialize an empty list to store the resolved port ranges
        port_ranges = []
    
        # Check if the name exists in service_objects
        for service in service_objects:
            if service['name'] == name:
                protocol = service.get('protocol', '')
                tcp_range = service.get('tcp-portrange', '')
                udp_range = service.get('udp-portrange', '')
                sctp_range = service.get('sctp-portrange', '')
                icmptype = str(service.get('icmptype', ''))
                icmpcode = str(service.get('icmpcode', ''))
                if protocol == 'TCP/UDP/SCTP' and tcp_range:
                    port_ranges.append(f"TCP/{tcp_range}")
                    if int(service['session-ttl']) > 0:
                        print(f"TCP/{service['name']=} {service['session-ttl']=}")
                        port_ranges.pop()
                        port_ranges.append(f"TCP/{tcp_range}_{service['session-ttl']}")
                if protocol == 'TCP/UDP/SCTP' and udp_range:
                    port_ranges.append(f"UDP/{udp_range}")
                if protocol == 'TCP/UDP/SCTP' and sctp_range:  
                    port_ranges.append(f"SCTP/{sctp_range}")
                if protocol == 'ICMP':
                    port_ranges.append(f"ICMP_{icmptype}/{icmpcode}")
                if protocol == 'IP':
                    port_ranges.append(f"IP_{service['name']}_{service['protocol-number']}")
                    # print(f"IP service: IP_{service['name']}_{service['protocol-number']}")
                if protocol == 'ALL':
                    port_ranges.append(f"ALL_{service['name']}")
                    print(f"ALL {service=}")
                # else:
                #     port_ranges.append(f"{service['name']}")
                #     print(f"WHAT {service=}")
                return port_ranges
    
        # Check if the name exists in service_groups
        for group in service_groups:
            if group['name'] == name:
                # For each member, recursively resolve it to its port ranges
                for member in group['member']:
                    port_ranges += self.resolve_service_to_ports(member['name'], service_objects, service_groups)
                return port_ranges
    
        # If the name does not exist in either, return an empty list
        return port_ranges

    def resolve_policy(self, policies: List[Dict],
                   address_objects: List[Dict],
                   address_groups: List[Dict],
                   service_objects: List[Dict],
                   service_groups: List[Dict],
                   intf_objects: List[Dict]) -> List[Dict]:
        # Initialize an empty list to store the updated policies
        updated_policies = []
    
        # Loop through each policy
        for policy in policies:
            updated_policy = policy.copy()  # Copy existing policy to avoid modifying the original
            resolved_src_addresses = []
            resolved_dst_addresses = []
            resolved_services = []
            resolved_srcintf = []
            resolved_dstintf = []
    
            # Loop through each source address in the policy
            for address in policy.get('srcaddr', []):
                # Resolve each source address to its values
                values = self.resolve_addr_to_value(address['name'], address_objects, address_groups)
                resolved_src_addresses.extend(values)
        
            # Loop through each destination address in the policy
            for address in policy.get('dstaddr', []):
                # Resolve each destination address to its values
                values = self.resolve_addr_to_value(address['name'], address_objects, address_groups)
                resolved_dst_addresses.extend(values)
    
            # Loop through each service in the policy
            for service in policy.get('service', []):
                # Resolve each service to its port ranges
                port_ranges = self.resolve_service_to_ports(service['name'], service_objects, service_groups)
                resolved_services.extend(port_ranges)
        
            # Loop through each source interfaces in the policy
            for srcintf in policy.get('srcintf', []):
                # Resolve each source interface to zone name
                srcint = self.resolve_intf(srcintf['name'], self.interfaces)
                resolved_srcintf.extend(srcint)
            for dstintf in policy.get('dstintf', []):
                # Resolve each dst interface to zone name
                dstint = self.resolve_intf(dstintf['name'], self.interfaces)
                resolved_dstintf.extend(dstint)
    
            # Update the 'srcint','srcaddr', 'dstaddr', and 'service' fields in the policy
            updated_policy['resolved_srcaddr'] = list(set(resolved_src_addresses))
            updated_policy['resolved_dstaddr'] = list(set(resolved_dst_addresses))
            updated_policy['resolved_service'] = list(set(resolved_services))
            updated_policy['resolved_srcintf'] = list(set(resolved_srcintf))
            updated_policy['resolved_dstintf'] = list(set(resolved_dstintf))
            updated_policies.append(updated_policy)
    
        return updated_policies
    
    def write_to_excel(self, duplicates, filename):    
        # Get the current date and time
        current_datetime = datetime.datetime.now()
    
        # Format the date and time as a string in the desired format
        suffix = current_datetime.strftime("%Y_%m_%d_%H_%M")
    
        # Add the suffix to the filename
        excel_file_name = filename.replace('.', f'_{suffix}.')
    
        all_duplicate_policies = []
        all_to_remove_policies = []
    
        # Loop through each tuple in the list and accumulate all policies
        for duplicate_policies, to_remove_policies in duplicates:
            all_duplicate_policies.append(duplicate_policies)
            all_to_remove_policies.append(to_remove_policies)
    
        # Convert lists of dictionaries to DataFrames
        duplicate_df = pd.DataFrame(all_duplicate_policies)
        to_remove_df = pd.DataFrame(all_to_remove_policies)
    
        # Keep only the columns that we are interested in
        columns_to_keep = ['policyid', 'srcintf', 'dstintf', 'srcaddr', 'dstaddr', 'service', 'action', 'comments',
                        'resolved_srcintf', 'resolved_dstintf', 'resolved_srcaddr', 'resolved_dstaddr', 'resolved_service']
    
        # Add a reference column next to 'policyid' referencing the policyid of the other tuple element
        duplicate_df['reference_policyid'] = to_remove_df['policyid'].values
        to_remove_df['reference_policyid'] = duplicate_df['policyid'].values
    
        # Reorder columns to have 'policyid' and 'reference_policyid' at the beginning
        columns_order = ['policyid', 'reference_policyid'] + columns_to_keep[1:]
        duplicate_df = duplicate_df[columns_order]
        to_remove_df = to_remove_df[columns_order]
    
        # Create a Pandas Excel writer using XlsxWriter as the engine
        with pd.ExcelWriter(excel_file_name, engine='openpyxl') as writer:
            # Write DataFrames to Excel sheets
            duplicate_df.to_excel(writer, sheet_name='Duplicate', index=False)
            to_remove_df.to_excel(writer, sheet_name='2bRemoved', index=False)
    
    # This function should take two policies as input and return True if they are identical
    # (ignoring names and considering the flattened address and service groups), and False otherwise.
    def policies_are_identical(self, policy1, policy2):
        """
        Checks whether two policies are identical.
    
        Arguments:
        policy1, policy2 -- dictionaries representing the policies to compare.
        Returns True if the policies are identical, and False otherwise.
        """
        return (
            set(policy1["resolved_srcaddr"]) == set(policy2["resolved_srcaddr"])
            and set(policy1["resolved_dstaddr"]) == set(policy2["resolved_dstaddr"])
            and set(policy1["resolved_service"]) == set(policy2["resolved_service"])
            and set(policy1["resolved_srcintf"]) == set(policy2["resolved_srcintf"])
            and set(policy1["resolved_dstintf"]) == set(policy2["resolved_dstintf"])
        )
    
    # Use these functions to deduplicate your list of policies. You can do this with a simple nested loop: for each policy, check if it is identical to any of
    # the policies that come after it in the list.
    # If it is, remove the duplicate. To avoid modifying the list while you're iterating over it, you can create a new list to hold the deduplicated policies.
    
    def get_duplicate_policies(self, policies):
        """Removes duplicate policies from a list of policies.
    
        Args:
            policies (list): List of policies to deduplicate.
    
        Returns:
            tuple: Tuple containing a list of deduplicated policies and a list of duplicates.
    
        """
        deduplicated_policies = []
        duplicates = []
    
        for i in range(len(policies)):
            is_duplicate = False
            for j in range(i+1, len(policies)): # avoid recursive comparison
                if self.policies_are_identical(policies[i], policies[j]):
                    duplicates.append((policies[i], policies[j]))  # Save removed/duplicated policy and survived policy
                    is_duplicate = True
                    break
            if not is_duplicate:
                deduplicated_policies.append(policies[i])
    
        return deduplicated_policies, duplicates
 

    def run(self):
        resolved_policies = self.resolve_policy(self.policies, self.addresses, self.addrgroups, self.services, self.servicegrps, self.interfaces)
        with open(self.resolved_policies_output,'w') as f:
            f.write(f"Resolved Policies:\n{str(resolved_policies)}")
        deduplicated_policies, duplicated_policies = self.get_duplicate_policies(resolved_policies)
        self.write_to_excel(duplicated_policies, self.output_excel_file_for_validation)

if __name__ == "__main__":
    manager = FortigatePolicyManager()
    manager.run()


   
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\fortigate_policy_manager_interface.py

# 22. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/jsondeepdiff_policies.py
import os
import json

class JSONDeepDiff:
    '''
    Class to deepdiff policies dictionary (of list of dictionaries) based upon "policyid"
    '''
    def __init__(self, folder_path, selected_env_name):
        self.folder_path = folder_path
        self.folder1_path = os.path.join(folder_path, "b4")
        self.folder2_path = os.path.join(folder_path, "after")
        self.script_folder_path = os.path.dirname(os.path.abspath(__file__))
        self.selected_env_name = selected_env_name

    @staticmethod
    def compare_dicts(dict1, dict2, prefix=""):
        """
        Recursively compares two dictionaries and generates a list of differences.
    
        Args:
            dict1 (dict): The first dictionary to compare.
            dict2 (dict): The second dictionary to compare.
            prefix (str): A prefix to add to the difference keys.
    
        Returns:
            list: A list of differences between the dictionaries.
        """
        diff_list = []
    
        for key in dict1.keys():
            if key not in dict2:
                diff_list.append(f"- {prefix}{key}: {dict1[key]}")
    
        for key in dict2.keys():
            if key not in dict1:
                diff_list.append(f"+ {prefix}{key}: {dict2[key]}")
    
        for key in dict1.keys() & dict2.keys():
            if isinstance(dict1[key], dict) and isinstance(dict2[key], dict):
                diff_list.extend(compare_dicts(dict1[key], dict2[key], prefix=f"{prefix}{key}."))
            elif dict1[key] != dict2[key]:
                diff_list.append(f"- {prefix}{key}: {dict1[key]}")
                diff_list.append(f"+ {prefix}{key}: {dict2[key]}")
    
        return diff_list

    def process_folders(self):
        if not os.path.isdir(self.folder1_path) or not os.path.isdir(self.folder2_path):
            print("Invalid folder paths. Please provide valid paths to folders.")
            return

        folder1_files = os.listdir(self.folder1_path)
        folder2_files = os.listdir(self.folder2_path)

        for file_name in folder1_files:
            file1_path = os.path.join(self.folder1_path, file_name)

        for file_name in folder2_files:
            file2_path = os.path.join(self.folder2_path, file_name)

        # resolve filename datetime part
        file1_name = os.path.basename(file1_path).split('.')[0]
        filename2_datetime = os.path.basename(file2_path).split('.')[0]
    
        # Load the JSON data from both files
        with open(file1_path, 'r') as file1:
            json_data1 = json.load(file1)
            print(f'{json_data1=}')
        with open(file2_path, 'r') as file2:
            json_data2 = json.load(file2)

        # Extract the 'policyid' from each JSON object within the policies list
        ids1 = [item.get('policyid') for item in json_data1['policies']]
        ids2 = [item.get('policyid') for item in json_data2['policies']]
    
        # Find all unique IDs from both sets
        all_ids = set(ids1) | set(ids2)
        ids_only_in_before = set(ids1) - set(ids2)
        ids_only_in_after = set(ids2) - set(ids1)
    
        # Initialize a flag to check if any differences were found
        differences_found = False
    
        # Generate the output file name for this file
    
        output_file_name = f"{self.folder_path}/{self.selected_env_name}_{file1_name}_{filename2_datetime}_deepdiff.txt"
    
        with open(output_file_name, 'w') as output_file:
            # Write IDs only in the "before" file
            if ids_only_in_before:
                differences_found = True
                output_file.write("policyids in before and not in after:\n")
                for common_id in ids_only_in_before:
                    output_file.write(f"- ID: {common_id}\n")
    
            # Write IDs only in the "after" file
            if ids_only_in_after:
                differences_found = True
                output_file.write("policyids in after and not in before:\n")
                for common_id in ids_only_in_after:
                    output_file.write(f"+ ID: {common_id}\n")
    
            # Iterate through all unique IDs and compare the rest of the differences
            for common_id in all_ids:
                # Filter JSON data based on the 'ID' for comparison
                data1 = [item for item in json_data1['policies'] if item.get('policyid') == common_id]
                data2 = [item for item in json_data2['policies'] if item.get('policyid') == common_id]
    
                # Compare the filtered JSON data using deepdiff
                if data1 and data2:
                    diff = self.compare_dicts(data1[0], data2[0])
    
                    # Check if there are differences
                    if diff:
                        differences_found = True
    
                        # Write section header only if there are differences
                        if common_id not in ids_only_in_before and common_id not in ids_only_in_after:
                            output_file.write(f"\nDifferences in {file_name} (ID: {common_id}):\n")
    
                        # Write the differences to the output file
                        output_file.write("\n".join(diff))
                        output_file.write("\n")  # Add a blank line between records
    
            # If no differences were found, delete the output file
            if not differences_found:
                try:
                    os.remove(output_file_name)
                    print(f"No Difference Found for {file1_name}!!!")
                except Exception as e:
                    print(e)
            else:
                print(f"Differences for {file1_name} have been saved to {output_file_name}.")

    def run(self):
        self.process_folders()

if __name__ == "__main__":
    print(os.getcwd())
    folder_path = input("Enter the path to the folder for diff: ")
    json_diff = JSONDeepDiff(folder_path)
    json_diff.run()

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\jsondeepdiff_policies.py

# 23. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/jsondeepdiff_policy_id.py
import os
import json

class JSONDeepDiff:
    '''
    Class to deepdiff policies dictionary (of list of dictionaries) based upon "policyid"
    '''
    def __init__(self, folder_path, selected_env_name):
        self.folder_path = folder_path
        self.folder1_path = os.path.join(folder_path, "b4")
        self.folder2_path = os.path.join(folder_path, "after")
        self.script_folder_path = os.path.dirname(os.path.abspath(__file__))
        self.selected_env_name = selected_env_name

    @staticmethod
    def compare_dicts(dict1, dict2, prefix=""):
        """
        Recursively compares two dictionaries and generates a list of differences.
    
        Args:
            dict1 (dict): The first dictionary to compare.
            dict2 (dict): The second dictionary to compare.
            prefix (str): A prefix to add to the difference keys.
    
        Returns:
            list: A list of differences between the dictionaries.
        """
        diff_list = []
    
        for key in dict1.keys():
            if key not in dict2:
                diff_list.append(f"- {prefix}{key}: {dict1[key]}")
    
        for key in dict2.keys():
            if key not in dict1:
                diff_list.append(f"+ {prefix}{key}: {dict2[key]}")
    
        for key in dict1.keys() & dict2.keys():
            if isinstance(dict1[key], dict) and isinstance(dict2[key], dict):
                diff_list.extend(compare_dicts(dict1[key], dict2[key], prefix=f"{prefix}{key}."))
            elif dict1[key] != dict2[key]:
                diff_list.append(f"- {prefix}{key}: {dict1[key]}")
                diff_list.append(f"+ {prefix}{key}: {dict2[key]}")
    
        return diff_list

    def process_folders(self):
        if not os.path.isdir(self.folder1_path) or not os.path.isdir(self.folder2_path):
            print("Invalid folder paths. Please provide valid paths to folders.")
            return

        folder1_files = os.listdir(self.folder1_path)
        folder2_files = os.listdir(self.folder2_path)

        for file_name in folder1_files:
            file1_path = os.path.join(self.folder1_path, file_name)

        for file_name in folder2_files:
            file2_path = os.path.join(self.folder2_path, file_name)

        # resolve filename datetime part
        file1_name = os.path.basename(file1_path).split('.')[0]
        filename2_datetime = os.path.basename(file2_path).split('.')[0]
    
        # Load the JSON data from both files
        with open(file1_path, 'r') as file1:
            json_data1 = json.load(file1)
            print(f'{json_data1=}')
        with open(file2_path, 'r') as file2:
            json_data2 = json.load(file2)

        # Extract the 'ID' from each JSON object within the list
        ids1 = [item.get('ID') for item in json_data1]
        ids2 = [item.get('ID') for item in json_data2]
    
        # Find all unique IDs from both sets
        all_ids = set(ids1) | set(ids2)
        ids_only_in_before = set(ids1) - set(ids2)
        ids_only_in_after = set(ids2) - set(ids1)
    
        # Initialize a flag to check if any differences were found
        differences_found = False
    
        # Generate the output file name for this file
    
        output_file_name = f"{self.folder_path}/{self.selected_env_name}_{file1_name}_{filename2_datetime}_deepdiff.txt"
    
        with open(output_file_name, 'w') as output_file:
            # Write IDs only in the "before" file
            if ids_only_in_before:
                differences_found = True
                output_file.write("IDs in before and not in after:\n")
                for common_id in ids_only_in_before:
                    output_file.write(f"- ID: {common_id}\n")
        
            # Write IDs only in the "after" file
            if ids_only_in_after:
                differences_found = True
                output_file.write("IDs in after and not in before:\n")
                for common_id in ids_only_in_after:
                    output_file.write(f"+ ID: {common_id}\n")
    
            # Iterate through all unique IDs and compare the rest of the differences
            for common_id in all_ids:
                # Filter JSON data based on the 'ID' for comparison
                data1 = [item for item in json_data1 if item.get('ID') == common_id]
                data2 = [item for item in json_data2 if item.get('ID') == common_id]
    
                # Compare the filtered JSON data using deepdiff
                if data1 and data2:
                    diff = self.compare_dicts(data1[0], data2[0])
    
                    # Check if there are differences
                    if diff:
                        differences_found = True
    
                        # Write section header only if there are differences
                        if common_id not in ids_only_in_before and common_id not in ids_only_in_after:
                            output_file.write(f"\nDifferences in {file_name} (ID: {common_id}):\n")
    
                        # Write the differences to the output file
                        output_file.write("\n".join(diff))
                        output_file.write("\n")  # Add a blank line between records
    
            # If no differences were found, delete the output file
            if not differences_found:
                try:
                    os.remove(output_file_name)
                    print(f"No Difference Found for {file1_name}!!!")
                except Exception as e:
                    print(e)
            else:
                print(f"Differences for {file1_name} have been saved to {output_file_name}.")

    def run(self):
        self.process_folders()

if __name__ == "__main__":
    print(os.getcwd())
    folder_path = input("Enter the path to the folder for diff: ")
    json_diff = JSONDeepDiff(folder_path)
    json_diff.run()

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\jsondeepdiff_policy_id.py

# 24. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/json_list_of_dicts_deepdiff_folder_v1.py
#***********************************************************
#     Filename: json_list_of_dicts_deepdiff_folder_v1.py
#     Purpose: Present diff based upon a folder name
#     Date of creation: 9-10-2023
#     Author-Joe Zhu
#***********************************************************
 
import os
from deepdiff import DeepDiff
import json
 
'''
The script will present diff operation between two json files for the same firewall configuration section, e.g. address, policy and etc.
 
Input:
The base folder:
C:\Users\s4739693\Downloads\fgt_diff\foldername
You'd need to create this folder based upon timestamp, such as 2023_09_30_07_57
 
Save your files for diff into subfolders:
For file1: b4
For file1: afer
 
Output:
Diff file will be saved to the script's basedir\output):
e.g. C:\Users\s4739693\MyPythonProj\explore\IGW\output
Name of the diff file: e.g. PPE_policy_standard_list_2023_09_23_2023_09_30_deepdiff.txt
'''
 
def replace_backslash(filepath):
    """
    Replaces backslashes with forward slashes in a filepath.
 
    Args:
        filepath (str): The filepath to be processed.
 
    Returns:
        str: The filepath with backslashes replaced by forward slashes.
    """
    return filepath.replace("\\", "/")
 
def compare_dicts(dict1, dict2, prefix=""):
    """
    Recursively compares two dictionaries and generates a list of differences.
 
    Args:
        dict1 (dict): The first dictionary to compare.
        dict2 (dict): The second dictionary to compare.
        prefix (str): A prefix to add to the difference keys.
 
    Returns:
        list: A list of differences between the dictionaries.
    """
    diff_list = []
 
    for key in dict1.keys():
        if key not in dict2:
            diff_list.append(f"- {prefix}{key}: {dict1[key]}")
 
    for key in dict2.keys():
        if key not in dict1:
            diff_list.append(f"+ {prefix}{key}: {dict2[key]}")
 
    for key in dict1.keys() & dict2.keys():
        if isinstance(dict1[key], dict) and isinstance(dict2[key], dict):
            diff_list.extend(compare_dicts(dict1[key], dict2[key], prefix=f"{prefix}{key}."))
        elif dict1[key] != dict2[key]:
            diff_list.append(f"- {prefix}{key}: {dict1[key]}")
            diff_list.append(f"+ {prefix}{key}: {dict2[key]}")
 
    return diff_list
 
# prompt for the folder for diff:
print(os.getcwd())
folder_path = replace_backslash(input("Enter the path to the folder for diff: "))
short_folder1 = "b4"
short_folder2 = "after"
folder1_path = folder_path + f"/{short_folder1}"
folder2_path = folder_path + f"/{short_folder2}"
 
script_file_path = os.path.abspath(__file__)
script_folder_path = os.path.dirname(script_file_path)
 
# Check if the provided paths are valid folders
if not os.path.isdir(folder1_path) or not os.path.isdir(folder2_path):
    print("Invalid folder paths. Please provide valid paths to folders.")
else:
    # Get a list of file names in each folder
    folder1_files = os.listdir(folder1_path)
    folder2_files = os.listdir(folder2_path)
 
    # Iterate through the files in both folders
    for file_name in folder1_files:
        file1_path = os.path.join(folder1_path, file_name)
       
    for file_name in folder2_files:
        file2_path = os.path.join(folder2_path, file_name)
 
    # resolve filename datetime part
    file1_name = os.path.basename(file1_path).split('.')[0]
    filename2_datetime = os.path.basename(file2_path).split('list_')[1].split('.')[0]
 
    # Load the JSON data from both files
    with open(file1_path, 'r') as file1:
        json_data1 = json.load(file1)
    with open(file2_path, 'r') as file2:
        json_data2 = json.load(file2)
 
    # Extract the 'ID' from each JSON object within the list
    ids1 = [item.get('ID') for item in json_data1]
    ids2 = [item.get('ID') for item in json_data2]
 
    # Find all unique IDs from both sets
    all_ids = set(ids1) | set(ids2)
    ids_only_in_before = set(ids1) - set(ids2)
    ids_only_in_after = set(ids2) - set(ids1)
 
    # Initialize a flag to check if any differences were found
    differences_found = False
 
    # Generate the output file name for this file
 
    output_file_name = os.path.join(script_folder_path, f"output/PPE_{file1_name}_{filename2_datetime}_deepdiff.txt")
 
    with open(output_file_name, 'w') as output_file:
        # Write IDs only in the "before" file
        if ids_only_in_before:
            differences_found = True
            output_file.write("IDs in before and not in after:\n")
            for common_id in ids_only_in_before:
                output_file.write(f"- ID: {common_id}\n")
 
        # Write IDs only in the "after" file
        if ids_only_in_after:
            differences_found = True
            output_file.write("IDs in after and not in before:\n")
            for common_id in ids_only_in_after:
                output_file.write(f"+ ID: {common_id}\n")
 
        # Iterate through all unique IDs and compare the rest of the differences
        for common_id in all_ids:
            # Filter JSON data based on the 'ID' for comparison
            data1 = [item for item in json_data1 if item.get('ID') == common_id]
            data2 = [item for item in json_data2 if item.get('ID') == common_id]
 
            # Compare the filtered JSON data using deepdiff
            if data1 and data2:
                diff = compare_dicts(data1[0], data2[0])
 
                # Check if there are differences
                if diff:
                    differences_found = True
 
                    # Write section header only if there are differences
                    if common_id not in ids_only_in_before and common_id not in ids_only_in_after:
                        output_file.write(f"\nDifferences in {file_name} (ID: {common_id}):\n")
 
                    # Write the differences to the output file
                    output_file.write("\n".join(diff))
                    output_file.write("\n")  # Add a blank line between records
 
        # If no differences were found, delete the output file
        if not differences_found:
            try:
                os.remove(output_file_name)
                print(f"No Difference Found for {file1_name}!!!")
            except Exception as e:
                print(e)
        else:
            print(f"Differences for {file1_name} have been saved to {output_file_name}.")
 
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\json_list_of_dicts_deepdiff_folder_v1.py

# 25. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/run_commands_FGT_v1.py
#*****************************************************
#     Filename: run_commands_FGT_v1.py
#     Purpose: Run arbitary FGT CLI and display results
#     Date of creation: 8-20-2023
#     Author-Joe Zhu
#*****************************************************
 
import paramiko
import time
import yaml
import select
import datetime
import os
import sys
sys.path.append('C:/Users/s4739693/MyPythonProj')
from utils.menu_tools import get_env_options
 
""""
If output gets cut off, go to send_command(), make sure use receive_all_data() for output; then in receive_all_data() adjust the buffer size as needed.
"""
def save_output_to_file(output):
    timestamp = datetime.datetime.now().strftime("%Y_%b_%d_%H_%M_%S")
    filename = f"output\\output_{timestamp}.txt"
 
    with open(filename, "w") as file:
        file.write(output)
 
def run_commands(fortigate_ip, username, password, commands_string, send_per_command=False):
    """
    Connect to the FortiGate device and run commands.
 
    Args:
        fortigate_ip (str): IP address of the FortiGate device.
        username (str): Username for SSH login.
        password (str): Password for SSH login.
        commands_string (str): String containing the commands to be executed.
        send_per_command (bool, optional): If True, sends commands one by one.
                                          If False, sends all commands in a single batch.
 
    Returns:
        None
    """
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(fortigate_ip, username=username, password=password)
        chan = ssh.invoke_shell()
 
        if send_per_command:
            cmds = get_commands_string(commands_string)
            for cmd in cmds:
                send_command(chan, cmd)
        else:
            send_command(chan, commands_string)
 
        ssh.close()
    except paramiko.AuthenticationException:
        print("Authentication failed. Please check your credentials.")
    except paramiko.SSHException as ssh_ex:
        print(f"SSH connection error: {ssh_ex}")
    except Exception as ex:
        print(f"Error: {ex}")
 
def receive_all_data(chan):
    """
    Receive all data from the SSH channel.
 
    This function continuously reads data from the SSH channel until there is no more data available.
    It ensures that all data is received, even if the output size is larger than the specified buffer size.
 
    Args:
        chan (paramiko.Channel): Paramiko channel object for SSH communication.
 
    Returns:
        str: The received data as a decoded string.
 
    Raises:
        paramiko.SSHException: If there is an issue with the SSH channel.
        UnicodeDecodeError: If there is an error decoding the received data.
 
    Example:
        # Assuming 'chan' is the SSH channel
        output = receive_all_data(chan)
    """
    # buffer adjustable per the need
    buffer_size = 99999
    data = b""
    while True:
        try:
            # Use select to check if there is data available to be received
            readable, _, _ = select.select([chan], [], [], 0.1)
            if not readable:
                # No data available, break the loop
                break
 
            chunk = chan.recv(buffer_size)
        except paramiko.SSHException as ssh_ex:
            raise ssh_ex
        except Exception as ex:
            raise ex
 
        if not chunk:
            break
        data += chunk
    return data.decode()
 
def send_command(chan, command):
    """
    Send a command over the SSH channel and print the output.
 
    Args:
        chan (paramiko.Channel): Paramiko channel object for SSH communication.
        command (str): Command to be sent.
 
    Returns:
        None
    """
    chan.send(f"{command}\n")
    time.sleep(1)
    # output = chan.recv(99999).decode() # use this line of code a fallback if the next line not work!!!
    output = receive_all_data(chan)
 
    print(output)
    save_output_to_file(output)
 
def get_commands_string(commands_string):
    """
    Split the commands string into individual commands.
 
    Args:
        commands_string (str): String containing multiple commands.
 
    Returns:
        list: List of individual commands.
    """
    cmds = commands_string.splitlines()
    cmds = [cmd.strip() for cmd in cmds]
    return cmds
 
# Function to load configuration from YAML file
def load_config(config_file, env):
    """
    Load configuration parameters from a YAML file based on the specified env.
 
    Args:
        config_file (str): Path to the YAML configuration file.
        env (str): env name to load the configuration for.
 
    Returns:
        dict: A dictionary containing the configuration parameters for the given env.
    """
    with open(config_file, 'r') as file:
        config = yaml.safe_load(file)
    return config.get(env, {})
 
def main():
    # print(os.getcwd())
    config_file = "explore/IGW/config.yaml"
 
    while True:
        print("Please choose your environment:")
       
        # Get the env options dynamically from the config.yaml
        env_options = get_env_options(config_file)
 
        for i, env in enumerate(env_options, 1):
            print(f"{i}. {env.upper()}")
 
        user_input = input('Please enter your choice (e.g. 1 or 2 or 1,2 or q to quit): ')
        user_input = user_input.replace(" ", "").split(",")
 
        should_exit = False  # Flag to indicate if the user wants to quit the program
 
        for input_item in user_input:
            if input_item.isdigit():
                index = int(input_item)
                if 1 <= index <= len(env_options):
                    # Get the chosen env
                    env = env_options[index - 1]
                    config_data = load_config(config_file, env)
                    run_commands(**config_data)
                else:
                    print("Invalid env choice. Please try again!\n")
                    break  # Exit the for loop and re-prompt the user
            elif input_item.lower() == 'q':
                should_exit = True
                break  # Exit the for loop and terminate the program gracefully
            else:
                print("Invalid input. Please try again!\n")
                break  # Exit the for loop and re-prompt the user
 
        if should_exit:
            break  # Exit the while loop and terminate the program
 
if __name__ == '__main__':
    main()
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\run_commands_FGT_v1.py

# 26. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/run_commands_FGT_v1_OOP.py
# run_commands_FGT_v1_OOP.py
import asyncio
from concurrent.futures import ThreadPoolExecutor
import paramiko
import logging

# Setup logging for only this script
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler('console msg running fgt commands.txt')
handler.setLevel(logging.DEBUG)
logger.addHandler(handler)

import os
import sys
sys.path.append(os.getcwd())

# Assuming these imports match with your own modules and logic
from common.timeit import timeit
from common.generate_cmd_batches_from_file import command_batches  # Replace with your function to get command_batches

class FortiGateCLIAsync:
    """
    Asynchronous SSH client for interacting with FortiGate devices.
    """
    def __init__(self, host, username, password, timeout=10):
        """
        Initialize connection settings and SSH client.

        :param host: IP address of the FortiGate device
        :param username: SSH username
        :param password: SSH password
        :param timeout: Timeout for the SSH connection, in seconds
        """
        self.host = host
        self.username = username
        self.password = password
        self.timeout = timeout
        self.ssh_client = paramiko.SSHClient()
        self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.loop = None  # Initialized to None
        self.executor = ThreadPoolExecutor()
        self.is_connected = False  # Initialize to False

    async def connect(self):
        """
        Asynchronously establish an SSH connection using ThreadPoolExecutor.
        """
        self.loop = asyncio.get_running_loop()
        try:
            def wrapper():
                self.ssh_client.connect(hostname=self.host, username=self.username, password=self.password, timeout=self.timeout)
                
            await self.loop.run_in_executor(self.executor, wrapper)

            if self.ssh_client.get_transport() is not None:
                print("Successfully connected.")
                self.is_connected = True
            else:
                print("Failed to connect.")
                self.is_connected = False
        except Exception as e:
            self.is_connected = False
            print(f"Failed to connect due to exception: {e}")

    def _exec_command(self, ssh_client, command):
        """
        Execute a single command over SSH and return the output.

        :param ssh_client: Active Paramiko SSH client
        :param command: Command to run
        :return: Command output as a string
        """
        stdin, stdout, stderr = ssh_client.exec_command(command)
        return stdout.read().decode('utf-8')

    async def run_command_batch(self, command_batch):
        """
        Asynchronously execute a batch of commands over SSH.
        """
        if self.loop is None:
            self.loop = asyncio.get_running_loop()
        if not self.is_connected:
            msg = "Not connected. Please connect first."
            logger.warning(msg)
            print(msg)
            return
        try:
            output = ''
            
            logger.info(f"Sending command: {command_batch}")
            print(f"Sending command: {command_batch}")
            
            command_batch_output = await self.loop.run_in_executor(self.executor, self._exec_command, self.ssh_client, command_batch)
            output += command_batch_output

            # Log the output
            logger.info(f"Received output: {command_batch_output.strip()}")
            print(f"Received output: {command_batch_output.strip()}")

            return output
        except Exception as e:
            msg = f"Failed to run command batch due to exception: {e}"
            logger.error(msg)
            print(msg)


    async def disconnect(self):
        """
        Asynchronously close the SSH connection.
        """
        if self.loop is None:
            self.loop = asyncio.get_running_loop()
        await self.loop.run_in_executor(self.executor, self.ssh_client.close)


# Example usage
@timeit
async def main():
    """
    Example asynchronous routine to connect, send command batches, and disconnect.
    """
    fgt_cli = FortiGateCLIAsync(host="192.168.3.1", username="joe", password="Iching12#")
    await fgt_cli.connect()
    
    # Assuming commands_string is a list of command batches; each batch is a list of commands for the same policy ID
    for command_batch in command_batches:
        output = await fgt_cli.run_command_batch(command_batch)
        print(output)
    
    await fgt_cli.disconnect()

if __name__ == "__main__":
    asyncio.run(main())

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\run_commands_FGT_v1_OOP.py

# 27. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/archive/fortigate_api_get_objects_json_v1_copy.py
#*****************************************************
#     Filename: fortigate_api_get_objects_json_v1.py
#     Purpose: Generate FGT Object Dictionary
#     Date of creation: 9-01-2023
#     Author-Joe Zhu
#*****************************************************
 
import yaml
from fortigate_api import FortigateAPI
from common.utils import Environment_Task_Manager
# print(os.getcwd())
""" List of class objects straight from fortigate_api.py
        self.address = Address(self.rest)
        self.address_group = AddressGroup(self.rest)
        self.antivirus = Antivirus(self.rest)
        self.application = Application(self.rest)
        self.dhcp_server = DhcpServer(self.rest)
        self.external_resource = ExternalResource(self.rest)
        self.interface = Interface(self.rest)
        self.internet_service = InternetService(self.rest)
        self.ip_pool = IpPool(self.rest)
        self.policy = Policy(self.rest)
        self.schedule = Schedule(self.rest)
        self.service = Service(self.rest)
        self.service_category = ServiceCategory(self.rest)
        self.service_group = ServiceGroup(self.rest)
        self.snmp_community = SnmpCommunity(self.rest)
        self.virtual_ip = VirtualIP(self.rest)
        self.zone = Zone(self.rest)
        >> I added self.static_routes, see docstring below for details
        """
 
def load_config(config_file, env):
    with open(config_file, "r") as f:
        config = yaml.safe_load(f)
    # print(config.get(env, {}))
    return config.get(env, {})

env_file = f"config/config.yaml"
environ = input('Please enter environment: (Options: lab_fortigate):\n')
config_data = load_config(config_file, environ)
fgt_obj_output = f"{fpath}/output/{environ}_{config_data.get('vdom')}_objects_json.txt"
 
# create FortigateAPI object with IP, username, password and vdom
fgt = FortigateAPI(**config_data)
 
# get to know each of the object type's dictionary structure for the purpose of parsing their useful data
# Interfaces
interfaces = fgt.interface.get()
# print(interfaces)
# Addresses
addresses = fgt.address.get()
# print(addresses)
 
# Address Groups
addrgroups = fgt.address_group.get()
# print(addrgroups)
 
# Service
services = fgt.service.get()
# print(services)
 
# Service groups
servicegrps = fgt.service_group.get()
# print(servicegrps)
 
# Firewall Policy
policies = fgt.policy.get()
# print(policies)
 
# IP Pool
ippools = fgt.ip_pool.get()
# print(ippools)
 
# VIP
vips = fgt.virtual_ip.get()
# print(vips)
 
# static routes
'''
need to modify fortigate_api.py
1. import the class:
    from fortigate_api.staticroute import StaticRoute
2. under the class builder add:
    self.static_route = StaticRoute(self.rest)
3. paste the code below to staticroute.py
"""Static Route Object."""
 
from fortigate_api.base import Base
 
class StaticRoute(Base):
    """Static Route Object."""
 
    def __init__(self, rest):
        """Static Route Object.
 
        ::
            :param rest: Fortigate REST API connector
            :type rest: Fortigate
        """
        super().__init__(rest=rest, url_obj="api/v2/cmdb/router/static")
 
'''
routes = fgt.static_route.get()
# print(routes)
zones = fgt.zone.get()
# print(zones)
 
# Write to the output file
with open(fgt_obj_output, "w") as output_file:
    # Write the objects to the file with section notes
    output_file.write("#! Interfaces:\n" + str(interfaces) + "\n\n")
    output_file.write("#! Addresses:\n" + str(addresses) + "\n\n")
    output_file.write("#! Address Groups:\n" + str(addrgroups) + "\n\n")
    output_file.write("#! Services:\n" + str(services) + "\n\n")
    output_file.write("#! Service Groups:\n" + str(servicegrps) + "\n\n")
    output_file.write("#! Policies:\n" + str(policies) + "\n\n")
    output_file.write("#! IP Pools:\n" + str(ippools) + "\n\n")
    output_file.write("#! VIPs:\n" + str(vips) + "\n\n")
    output_file.write("#! Static Routes:\n" + str(routes) + "\n\n")
    output_file.write("#! Zones:\n" + str(zones) + "\n\n")
 
# Building object Dicts:
firewall_obj_dict = {}
firewall_obj_dict['interfaces'] = interfaces
firewall_obj_dict['addresses'] = addresses
firewall_obj_dict['addrgroups'] = addrgroups
firewall_obj_dict['services'] = services
firewall_obj_dict['servicegrps'] = servicegrps
firewall_obj_dict['policies'] = policies
firewall_obj_dict['ippools'] = ippools
firewall_obj_dict['routes'] = routes
firewall_obj_dict['zones'] = zones
 
if __name__ == '__main__':
    print(firewall_obj_dict)
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\archive\fortigate_api_get_objects_json_v1_copy.py

# 28. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/archive/run_commands_FGT_v1_OOP copy.py
import asyncio
from concurrent.futures import ThreadPoolExecutor
import paramiko
import logging
logging.basicConfig(level=logging.DEBUG)

import os
import sys
sys.path.append(os.getcwd())
from common.timeit import timeit
from fortigate.fortigate_tools.generate_commands import commands_string


class FortiGateCLIAsync:
    def __init__(self, host, username, password, timeout=10):
        self.host = host
        self.username = username
        self.password = password
        self.timeout = timeout
        self.ssh_client = paramiko.SSHClient()
        self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.loop = None  # Initialized to None
        self.executor = ThreadPoolExecutor()
        self.is_connected = False  # Initialize to False

    async def connect(self):
        self.loop = asyncio.get_running_loop()
        try:
            def wrapper():
                self.ssh_client.connect(hostname=self.host, username=self.username, password=self.password, timeout=self.timeout)
                
            await self.loop.run_in_executor(self.executor, wrapper)

            if self.ssh_client.get_transport() is not None:
                print("Successfully connected.")
                self.is_connected = True
            else:
                print("Failed to connect.")
                self.is_connected = False
        except Exception as e:
            self.is_connected = False
            print(f"Failed to connect due to exception: {e}")


    def _exec_command(self, ssh_client, command):
        stdin, stdout, stderr = ssh_client.exec_command(command)
        return stdout.read().decode('utf-8')

    async def run_command(self, command):
        if self.loop is None:
            self.loop = asyncio.get_running_loop()
        if not self.is_connected:
            print("Not connected. Please connect first.")
            return
        try:
            output = await self.loop.run_in_executor(self.executor, self._exec_command, self.ssh_client, command)
            return output
        except Exception as e:
            print(f"Failed to run command due to exception: {e}")


    async def disconnect(self):
        if self.loop is None:
            self.loop = asyncio.get_running_loop()
        await self.loop.run_in_executor(self.executor, self.ssh_client.close)

# Example usage
@timeit
async def main():
    fgt_cli = FortiGateCLIAsync(host="192.168.3.1", username="joe", password="x")
    await fgt_cli.connect()
    output = await fgt_cli.run_command(f"{commands_string}")
    print(output)
    await fgt_cli.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\archive\run_commands_FGT_v1_OOP copy.py

# 29. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/archive/run_commands_FGT_v1_OOP.py
import asyncio
from concurrent.futures import ThreadPoolExecutor
import paramiko
import logging
logging.basicConfig(level=logging.DEBUG)

import os
import sys
sys.path.append(os.getcwd())

# Assuming these imports match with your own modules and logic
from common.timeit import timeit
from common.generate_cmd_batches_from_file import command_batches  # Assuming commands_string is a list of command batches


class FortiGateCLIAsync:
    """
    Asynchronous SSH client for interacting with FortiGate devices.
    """
    def __init__(self, host, username, password, timeout=10):
        """
        Initialize connection settings and SSH client.

        :param host: IP address of the FortiGate device
        :param username: SSH username
        :param password: SSH password
        :param timeout: Timeout for the SSH connection, in seconds
        """
        self.host = host
        self.username = username
        self.password = password
        self.timeout = timeout
        self.ssh_client = paramiko.SSHClient()
        self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.loop = None  # Initialized to None
        self.executor = ThreadPoolExecutor()
        self.is_connected = False  # Initialize to False

    async def connect(self):
        """
        Asynchronously establish an SSH connection using ThreadPoolExecutor.
        """
        self.loop = asyncio.get_running_loop()
        try:
            def wrapper():
                self.ssh_client.connect(hostname=self.host, username=self.username, password=self.password, timeout=self.timeout)
                
            await self.loop.run_in_executor(self.executor, wrapper)

            if self.ssh_client.get_transport() is not None:
                print("Successfully connected.")
                self.is_connected = True
            else:
                print("Failed to connect.")
                self.is_connected = False
        except Exception as e:
            self.is_connected = False
            print(f"Failed to connect due to exception: {e}")

    def _exec_command(self, ssh_client, command):
        """
        Execute a single command over SSH and return the output.

        :param ssh_client: Active Paramiko SSH client
        :param command: Command to run
        :return: Command output as a string
        """
        stdin, stdout, stderr = ssh_client.exec_command(command)
        return stdout.read().decode('utf-8')

    async def run_command_batch(self, command_batch):
        """
        Asynchronously execute a batch of commands over SSH.

        :param command_batch: List of commands to run sequentially
        :return: Concatenated output from all commands
        """
        if self.loop is None:
            self.loop = asyncio.get_running_loop()
        if not self.is_connected:
            print("Not connected. Please connect first.")
            return
        try:
            output = ''
            for cmd in command_batch:
                output += await self.loop.run_in_executor(self.executor, self._exec_command, self.ssh_client, cmd)
            return output
        except Exception as e:
            print(f"Failed to run command batch due to exception: {e}")

    async def disconnect(self):
        """
        Asynchronously close the SSH connection.
        """
        if self.loop is None:
            self.loop = asyncio.get_running_loop()
        await self.loop.run_in_executor(self.executor, self.ssh_client.close)


# Example usage
@timeit
async def main():
    """
    Example asynchronous routine to connect, send command batches, and disconnect.
    """
    fgt_cli = FortiGateCLIAsync(host="192.168.3.1", username="joe", password="x")
    await fgt_cli.connect()
    
    # Assuming commands_string is a list of command batches; each batch is a list of commands for the same policy ID
    for command_batch in command_batches:
        output = await fgt_cli.run_command_batch(command_batch)
        print(output)
    
    await fgt_cli.disconnect()

if __name__ == "__main__":
    asyncio.run(main())

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\archive\run_commands_FGT_v1_OOP.py

# 30. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/fortigate_tools/ggrandchild/import error_append project root dir to sys_path.py
'''
module import error fixed by appending current module's os.getcwd() to sys.path, which is the top level project folder (absolute path)
'''
import os
print(f'{os.getcwd()=}')

import sys
sys.path.append(os.getcwd()) # all project file has the top level directory as its cwd??, once it's appended, I can access any subdir under it!
print(f"{sys.path=}")
from common.utils import Environment_Task_Manager

with open('config/tasks.yml', 'r') as f: # this relative path somehow doesn't rely on sys.path.append()??!
    yml = f.read()
    print(yml)
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\ggrandchild\import error_append project root dir to sys_path.py

# 31. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/tests/feature tests.py
"""
explore possiblities of fortigate_api by https://github.com/vladimirs-git/fortigate-api/tree/main
"""

from fortigate_api import FortigateAPI

fgt = FortigateAPI(host="192.168.3.1", username="joe", password="Iching12#", timeout = 30) #default ignored:vdom='root')


# Get address by name
addresses_by_name = fgt.address.get(uid="10.0.0.0/8")
print(addresses_by_name)

# Create address
data = {"name": "ADDRESS",
        "obj-type": "ip",
        "subnet": "127.0.0.100 255.255.255.252",
        "type": "ipmask"}
# response = fgt.address.create(data)
# print(f"{response=}")
# # # Get all addresses
# # addresses_all = fgt.address.get()

# # Get address by name
# addresses_by_name = fgt.address.get(uid="ADDRESS")
# print(f"{addresses_by_name=}")

# Get address by operator contains \"=@\"
# addresses_contains = fgt.address.get(filter="subnet=@10.0")
# print(f"{addresses_contains=}")

# # Get address by operator contains \"=@\"
# addresses_contains = fgt.address.get(filter="name=@net")
# print(f"{addresses_contains=}")

# # Get address by operator equals \"==\"
# addresses_contains = fgt.address.get(filter="name==net_10")
# print(f"{addresses_contains=}")

from collections import Counter

counter = Counter(('a', 'b', 'c', 'a', 'b', 'b')) # list/set does make sense for counting per element
# counter = Counter({'key_1': 38, 'key_2': 91, 'key_3': 53, 'key_4': 14, 'key_5': 31}) # pass dict doesn't make sense
# Output: Counter({'b': 3, 'a': 2, 'c': 1})
print(f"{counter['b']=}")
# print(f"{counter['key_5']=}") # pass dict doesn't make sense
from collections import namedtuple
# namedtuple vs class based:
# Class-based approach
class PersonClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# namedtuple-based approach
PersonData = namedtuple('PersonData', ['name', 'age'])
p = PersonData(name="Joe", age=58)
print(p.name, p.age)
# Both serve similar purposes but namedtuple is more concise

'''
    Username ("john doe"): The space between "john" and "doe" gets encoded as %20, resulting in 'john%20doe'.

    Email ("john@doe.com"): The "@" symbol gets encoded as %40, giving us 'john%40doe.com'.

    Special Characters ("?&=#"): Each special character is encoded, resulting in %3F%26%3D%23.'''
from fortigate_api import helpers as h

nameinurl = h.quote("john doe")
print(f"{nameinurl=}")
emailinurl = h.quote("john@doe.com")
print(f"{emailinurl=}")


from collections import ChainMap
# useful for getting the value of a key in the order you specify for the chaining of dicts
dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}
chainmap = ChainMap(dict1, dict2)
print(f"{chainmap['b']=}")

# print os environment variables:
import os, sys
import json
print(f'{os.environ["COMPUTERNAME"]=}')

osenv = {'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\jacki\\AppData\\Roaming', 'APPDIR_PATH': 'C:\\Users\\jacki\\AppData\\Roaming\\Free Snipping Tool\\', 'ARYA': 'C:\\Users\\jacki\\Downloads\\Homelab\\Python\\arya\\arya\\', 'ASL.LOG': 'Destination=file', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'CHOCOLATEYLASTPATHUPDATE': '133415561497464466', 'CHROME_CRASHPAD_PIPE_NAME': '\\\\.\\pipe\\crashpad_28820_RZENNTMPZQBCWBAI', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'JACK-LABPC', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'EFC_3900': '1', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\jacki', 'LOCALAPPDATA': 'C:\\Users\\jacki\\AppData\\Local', 'LOGONSERVER': '\\\\JACK-LABPC', 'NUMBER_OF_PROCESSORS': '16', 'ONEDRIVE': 'C:\\Users\\jacki\\OneDrive', 'ONLINESERVICES': 'Online Services', 'ORIGINAL_XDG_CURRENT_DESKTOP': 'undefined', 'OS': 'Windows_NT', 'PATH': 'C:\\Python312\\Scripts\\;C:\\Python312\\;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\PuTTY\\;C:\\Program Files\\dotnet\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files (x86)\\Common Files\\Acronis\\SnapAPI\\;C:\\Program Files (x86)\\Common Files\\Acronis\\VirtualFile\\;C:\\Program Files (x86)\\Common Files\\Acronis\\VirtualFile64\\;C:\\Program Files (x86)\\Common Files\\Acronis\\FileProtector\\;C:\\Program Files (x86)\\Common Files\\Acronis\\FileProtector64\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\VanDyke Software\\SecureCRT\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Tools\\MSVC\\14.37.32822\\bin\\Hostx64\\x64;C:\\Program Files\\nodejs\\;C:\\ProgramData\\chocolatey\\bin;C:\\Users\\jacki\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\\;C:\\Users\\jacki\\AppData\\Local\\Programs\\Python\\Python311\\;C:\\Users\\jacki\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.2.1\\bin;C:\\Users\\jacki\\AppData\\Local\\atom\\bin;C:\\Users\\jacki\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\jacki\\AppData\\Local\\GitHubDesktop\\bin;C:\\Users\\jacki\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Program Files (x86)\\Sennheiser\\HeadSetup Pro\\Plugins;C:\\Program Files (x86)\\Sennheiser\\HeadSetup Pro\\Open Source;C:\\Program Files (x86)\\Sennheiser\\HeadSetup Pro\\External;C:\\Users\\jacki\\Downloads\\Homelab\\Python\\arya\\arya\\;C:\\Users\\jacki\\AppData\\Roaming\\npm', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.CPL', 'PLATFORMCODE': 'M8', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 154 Stepping 3, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9a03', 'PROGF81DEF27053': '1', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Users\\jacki\\OneDrive\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\Tools\\PowerShell\\Modules\\', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM COMMUNITY EDITION': 'C:\\Program Files\\JetBrains\\PyCharm Community Edition 2022.2.1\\bin;', 'REGIONCODE': 'NA', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\jacki\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\jacki\\AppData\\Local\\Temp', 'USERDOMAIN': 'JACK-LABPC', 'USERDOMAIN_ROAMINGPROFILE': 'JACK-LABPC', 'USERNAME': 'jacki', 'USERPROFILE': 'C:\\Users\\jacki', 'WINDIR': 'C:\\Windows', 'ZES_ENABLE_SYSMAN': '1', '__PSLOCKDOWNPOLICY': '0', 'TERM_PROGRAM': 'vscode', 'TERM_PROGRAM_VERSION': '1.83.1', 'LANG': 'en_US.UTF-8', 'COLORTERM': 'truecolor', 'GIT_ASKPASS': 'c:\\Users\\jacki\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass.sh', 'VSCODE_GIT_ASKPASS_NODE': 'C:\\Users\\jacki\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '--ms-enable-electron-run-as-node', 'VSCODE_GIT_ASKPASS_MAIN': 'c:\\Users\\jacki\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass-main.js', 'VSCODE_GIT_IPC_HANDLE': '\\\\.\\pipe\\vscode-git-680b67b555-sock', 'VSCODE_INJECTION': '1'}
# print(f"{type(osenv)=}")
osenv_json = json.dumps(osenv, indent=4)
# print(osenv_json)
# tempf = f"{os.environ['TEMP']}/OS_Environment_Variables.txt"
tempf = f"{os.getcwd()}/fortigate/output/OS_Environment_Variables.txt"
print(f"{os.getcwd()=}")
# sys.path.append(os.getcwd())
with open(tempf, 'w') as jfile:
    json.dump(osenv, jfile, indent=4)

urls = r"""Object  GUI and REST API URL to the object (FortiOS v6.4)
Address
https://192.168.3.1/ng/firewall/address

https://192.168.3.1/api/v2/cmdb/firewall/address/

AddressGroup
https://192.168.3.1/ng/firewall/address

https://192.168.3.1/api/v2/cmdb/firewall/addrgrp/

Antivirus
https://192.168.3.1/ng/utm/antivirus/profile

https://192.168.3.1/api/v2/cmdb/antivirus/profile/

Application
https://192.168.3.1/ng/utm/appctrl/sensor

https://192.168.3.1/api/v2/cmdb/application/list/

DhcpServer
https://192.168.3.1/ng/interface/edit/{name}

https://192.168.3.1/api/v2/cmdb/system.dhcp/server/

ExternalResource
https://192.168.3.1/ng/external-connector

https://192.168.3.1/api/v2/cmdb/system/external-resource/

Interface
https://192.168.3.1/ng/interface

https://192.168.3.1/api/v2/cmdb/system/interface/

InternetService
https://192.168.3.1/ng/firewall/internet_service

https://192.168.3.1/api/v2/cmdb/firewall/internet-service/

IpPool
https://192.168.3.1/ng/firewall/ip-pool

https://192.168.3.1/api/v2/cmdb/firewall/ippool/

Policy
https://192.168.3.1/ng/firewall/policy/policy/standard

https://192.168.3.1/api/v2/cmdb/firewall/policy/

Schedule
https://192.168.3.1/ng/firewall/schedule

https://192.168.3.1/api/v2/cmdb/firewall.schedule/onetime/

Service
https://192.168.3.1/ng/firewall/service

https://192.168.3.1/api/v2/cmdb/firewall.service/custom/

ServiceCategory
https://192.168.3.1/ng/firewall/service

https://192.168.3.1/api/v2/cmdb/firewall.service/category/

ServiceGroup
https://192.168.3.1/ng/firewall/service

https://192.168.3.1/api/v2/cmdb/firewall.service/group/

SnmpCommunity
https://192.168.3.1/ng/system/snmp

https://192.168.3.1/api/v2/cmdb/system.snmp/community/

VirtualIp
https://192.168.3.1/ng/firewall/virtual-ip

https://192.168.3.1/api/v2/cmdb/firewall/vip/

Zone
https://192.168.3.1/ng/interface

https://192.168.3.1/api/v2/cmdb/system/zone/"""

# new_urls = urls.replace("hostname", "192.168.3.1")

# print(new_urls)
# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\tests\feature tests.py

# 32. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/tests/find_n_replace_in_list.py
# Sample list
my_list = [1, 2, 3, 4, 5]

# Tuples with (item_to_find, item_to_replace)
replace_tuples = [(2, 20), (4, 40), (5, 50)]

# Loop through the list
for i, item in enumerate(my_list):
    for item_to_find, item_to_replace in replace_tuples:
        if item == item_to_find:
            my_list[i] = item_to_replace

print(my_list)

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\tests\find_n_replace_in_list.py

# 33. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/fortigate/tests/__init__.py
import sys
import os
sys.path.append(os.getcwd())

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\tests\__init__.py

# 34. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/OCR/find_python_code_photo.py
        
import os
import cv2
import pytesseract
from PIL import Image

# Path to the tesseract executable
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Directory containing images
img_dir = r'C:\Users\jacki\Personal\Photos\photo_joe'
# Python-specific keywords you expect to find in images
keywords = ['import', 'def', 'class', 'for', 'while', 'if']

def is_taken_by_iphone(image_path):
    try:
        with Image.open(image_path) as image:
            exif_data = image._getexif()
            if exif_data:
                # 271 is the tag for 'Make' in EXIF data
                make = exif_data.get(271, '').upper()
                return 'IPHONE' in make
    except IOError:
        print(f"IOError: Unable to open or identify image file '{image_path}'.")
    except Exception as e:
        print(f"Error processing EXIF data for image: {image_path}, Error: {e}")
    return False


def contains_python_code(image_path):
    # if not is_taken_by_iphone(image_path):
    #     return False

    image = cv2.imread(image_path, cv2.IMREAD_COLOR)
    if image is None:
        print(f"Error loading image: {image_path}")
        return False
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    text = pytesseract.image_to_string(gray)

    # Check for Python-specific keywords
    for keyword in keywords:
        if keyword in text:
            print(f"Possible Python code found in image: {image_path}")
            with open(output_file_path, 'a') as output_file:
                output_file.write(image_path + '\n')
            return True
    return False

# Initialize the file for writing
output_file_path = r'C:\Users\jacki\Downloads\Homelab\recovered_code_Eric\possible python code photo names.txt'
with open(output_file_path, 'w') as f:  # Clear the file contents
    pass

for root, dirs, files in os.walk(img_dir):
    for file in files:
        if file.lower().endswith(('.png', '.jpg', '.jpeg')):
            image_path = os.path.join(root, file)
            contains_python_code(image_path)

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\OCR\find_python_code_photo.py

# 35. File: C:/Users/jacki/Downloads/Homelab/DC_Automation/OCR/ocr by chat.py


for node in top_system_data['imdata']:
	dn = node['topSystem']['attributes']['dn']
	name = node['topSystem']['attributes']['name']
	oobMgmtAddr = node['topSystem']['attributes']['oobMgmtAddr']
	oobMgmtAddrMask = node['topSystem']['attributes']['oobMgmtAddrMask']
	role = node['topSystem']['attributes']['role']

	node_data.append({
	"dn": dn,
	"name": name,
	"oobMgmtAddr": oobMgmtAddr,
	"oobMgmtAddrMask": oobMgmtAddrMask,
	"role": role
	})

	with open('apic_top_system_output.json', 'w') as f:
	json.dump(node_data, f, indent=4)
	print("Data successfully written to apic_top_system_output.json")

	log_out = APIC_URL + "/api/aaaLogout.json"
	session.post(log_out, json={"aaaUser": {"attributes": {"name": "admin", "pwd": "cisco"}}}, verify=False)

# End of C:\Users\jacki\Downloads\Homelab\DC_Automation\OCR\ocr by chat.py

# Total number of Python files concatenated: 35

# Directory Structure:
C:\Users\jacki\Downloads\Homelab\DC_Automation/
    fmc_main.py
    fortigate_main.py
    C:\Users\jacki\Downloads\Homelab\DC_Automation\common/
        environment_manager.py
        generate_cmd_batches_from_file.py
        generate_requirements.py
        get_all_pyfiles.py
        play_back_pyfiles_to_project_folder.py
        task_manager.py
        timeit.py
        utils.py
        C:\Users\jacki\Downloads\Homelab\DC_Automation\fmc\fmc_tools/
            acp.py
            fmcobjectmanager.py
            fwobjectsjsonparser.py
            old fmc obj.py
        C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\archive/
            dedup_fgt_policies_ v11.py
            fortigatepolicymanager.py
            policy_manager.py
            run_commands_FGT_v1.py
        C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools/
            fortigateobjectmanager.py
            fortigate_policy_manager.py
            fortigate_policy_manager_interface.py
            jsondeepdiff_policies.py
            jsondeepdiff_policy_id.py
            json_list_of_dicts_deepdiff_folder_v1.py
            run_commands_FGT_v1.py
            run_commands_FGT_v1_OOP.py
            C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\archive/
                fortigate_api_get_objects_json_v1_copy.py
                run_commands_FGT_v1_OOP copy.py
                run_commands_FGT_v1_OOP.py
            C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\fortigate_tools\ggrandchild/
                import error_append project root dir to sys_path.py
        C:\Users\jacki\Downloads\Homelab\DC_Automation\fortigate\tests/
            feature tests.py
            find_n_replace_in_list.py
            __init__.py
    C:\Users\jacki\Downloads\Homelab\DC_Automation\OCR/
        find_python_code_photo.py
        ocr by chat.py
            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages/
                scp.py
                six.py
                win32_setctime.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\aiofiles/
                    base.py
                    os.py
                    ospath.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\aiofiles\tempfile/
                        temptypes.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\aiofiles\threadpool/
                        binary.py
                        text.py
                        utils.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\bcrypt/
                    __about__.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\certifi/
                    core.py
                    __init__.py
                    __main__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cffi/
                    api.py
                    backend_ctypes.py
                    cffi_opcode.py
                    commontypes.py
                    cparser.py
                    error.py
                    ffiplatform.py
                    lock.py
                    model.py
                    pkgconfig.py
                    recompiler.py
                    setuptools_ext.py
                    vengine_cpy.py
                    vengine_gen.py
                    verifier.py
                    _imp_emulation.py
                    _shimmed_dist_utils.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\chardet/
                    big5freq.py
                    big5prober.py
                    chardistribution.py
                    charsetgroupprober.py
                    charsetprober.py
                    codingstatemachine.py
                    codingstatemachinedict.py
                    cp949prober.py
                    enums.py
                    escprober.py
                    escsm.py
                    eucjpprober.py
                    euckrfreq.py
                    euckrprober.py
                    euctwfreq.py
                    euctwprober.py
                    gb2312freq.py
                    gb2312prober.py
                    hebrewprober.py
                    jisfreq.py
                    johabfreq.py
                    johabprober.py
                    jpcntx.py
                    langbulgarianmodel.py
                    langgreekmodel.py
                    langhebrewmodel.py
                    langhungarianmodel.py
                    langrussianmodel.py
                    langthaimodel.py
                    langturkishmodel.py
                    latin1prober.py
                    macromanprober.py
                    mbcharsetprober.py
                    mbcsgroupprober.py
                    mbcssm.py
                    resultdict.py
                    sbcharsetprober.py
                    sbcsgroupprober.py
                    sjisprober.py
                    universaldetector.py
                    utf1632prober.py
                    utf8prober.py
                    version.py
                    __init__.py
                    __main__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\chardet\cli/
                        chardetect.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\chardet\metadata/
                        languages.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\charset_normalizer/
                    api.py
                    cd.py
                    constant.py
                    legacy.py
                    md.py
                    models.py
                    utils.py
                    version.py
                    __init__.py
                    __main__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\charset_normalizer\cli/
                        __init__.py
                        __main__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\ciscoconfparse/
                    ccp_abc.py
                    ccp_util.py
                    ciscoconfparse.py
                    errors.py
                    models_asa.py
                    models_cisco.py
                    models_iosxr.py
                    models_junos.py
                    models_nxos.py
                    protocol_values.py
                    __init__.py
                    __main__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\colorama/
                    ansi.py
                    ansitowin32.py
                    initialise.py
                    win32.py
                    winterm.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\colorama\tests/
                        ansitowin32_test.py
                        ansi_test.py
                        initialise_test.py
                        isatty_test.py
                        utils.py
                        winterm_test.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography/
                    exceptions.py
                    fernet.py
                    utils.py
                    __about__.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat/
                        _oid.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\backends/
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\backends\openssl/
                                aead.py
                                backend.py
                                ciphers.py
                                cmac.py
                                decode_asn1.py
                                ec.py
                                rsa.py
                                utils.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\bindings/
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\bindings\openssl/
                                binding.py
                                _conditional.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\primitives/
                            cmac.py
                            constant_time.py
                            hashes.py
                            hmac.py
                            keywrap.py
                            padding.py
                            poly1305.py
                            _asymmetric.py
                            _cipheralgorithm.py
                            _serialization.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\primitives\asymmetric/
                                dh.py
                                dsa.py
                                ec.py
                                ed25519.py
                                ed448.py
                                padding.py
                                rsa.py
                                types.py
                                utils.py
                                x25519.py
                                x448.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\primitives\ciphers/
                                aead.py
                                algorithms.py
                                base.py
                                modes.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\primitives\kdf/
                                concatkdf.py
                                hkdf.py
                                kbkdf.py
                                pbkdf2.py
                                scrypt.py
                                x963kdf.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\primitives\serialization/
                                base.py
                                pkcs12.py
                                pkcs7.py
                                ssh.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\hazmat\primitives\twofactor/
                                hotp.py
                                totp.py
                                __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\cryptography\x509/
                        base.py
                        certificate_transparency.py
                        extensions.py
                        general_name.py
                        name.py
                        ocsp.py
                        oid.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dateutil/
                    easter.py
                    relativedelta.py
                    rrule.py
                    tzwin.py
                    utils.py
                    _common.py
                    _version.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dateutil\parser/
                        isoparser.py
                        _parser.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dateutil\tz/
                        tz.py
                        win.py
                        _common.py
                        _factories.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dateutil\zoneinfo/
                        rebuild.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\deprecated/
                    classic.py
                    sphinx.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dns/
                    asyncbackend.py
                    asyncquery.py
                    asyncresolver.py
                    dnssec.py
                    dnssectypes.py
                    e164.py
                    edns.py
                    entropy.py
                    enum.py
                    exception.py
                    flags.py
                    grange.py
                    immutable.py
                    inet.py
                    ipv4.py
                    ipv6.py
                    message.py
                    name.py
                    namedict.py
                    nameserver.py
                    node.py
                    opcode.py
                    query.py
                    rcode.py
                    rdata.py
                    rdataclass.py
                    rdataset.py
                    rdatatype.py
                    renderer.py
                    resolver.py
                    reversename.py
                    rrset.py
                    serial.py
                    set.py
                    tokenizer.py
                    transaction.py
                    tsig.py
                    tsigkeyring.py
                    ttl.py
                    update.py
                    version.py
                    versioned.py
                    win32util.py
                    wire.py
                    xfr.py
                    zone.py
                    zonefile.py
                    zonetypes.py
                    _asyncbackend.py
                    _asyncio_backend.py
                    _ddr.py
                    _immutable_ctx.py
                    _trio_backend.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dns\dnssecalgs/
                        base.py
                        cryptography.py
                        dsa.py
                        ecdsa.py
                        eddsa.py
                        rsa.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dns\quic/
                        _asyncio.py
                        _common.py
                        _sync.py
                        _trio.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dns\rdtypes/
                        dnskeybase.py
                        dsbase.py
                        euibase.py
                        mxbase.py
                        nsbase.py
                        svcbbase.py
                        tlsabase.py
                        txtbase.py
                        util.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dns\rdtypes\ANY/
                            AFSDB.py
                            AMTRELAY.py
                            AVC.py
                            CAA.py
                            CDNSKEY.py
                            CDS.py
                            CERT.py
                            CNAME.py
                            CSYNC.py
                            DLV.py
                            DNAME.py
                            DNSKEY.py
                            DS.py
                            EUI48.py
                            EUI64.py
                            GPOS.py
                            HINFO.py
                            HIP.py
                            ISDN.py
                            L32.py
                            L64.py
                            LOC.py
                            LP.py
                            MX.py
                            NID.py
                            NINFO.py
                            NS.py
                            NSEC.py
                            NSEC3.py
                            NSEC3PARAM.py
                            OPENPGPKEY.py
                            OPT.py
                            PTR.py
                            RP.py
                            RRSIG.py
                            RT.py
                            SMIMEA.py
                            SOA.py
                            SPF.py
                            SSHFP.py
                            TKEY.py
                            TLSA.py
                            TSIG.py
                            TXT.py
                            URI.py
                            X25.py
                            ZONEMD.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dns\rdtypes\CH/
                            A.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\dns\rdtypes\IN/
                            A.py
                            AAAA.py
                            APL.py
                            DHCID.py
                            HTTPS.py
                            IPSECKEY.py
                            KX.py
                            NAPTR.py
                            NSAP.py
                            NSAP_PTR.py
                            PX.py
                            SRV.py
                            SVCB.py
                            WKS.py
                            __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\fortigate_api/
                    address.py
                    address_group.py
                    antivirus.py
                    application.py
                    base.py
                    ccp.py
                    dhcp_server.py
                    extended_filters.py
                    external_resource.py
                    fortigate.py
                    fortigate_api.py
                    helpers.py
                    interface.py
                    internet_service.py
                    ip_pool.py
                    policy.py
                    schedule.py
                    service.py
                    service_category.py
                    service_group.py
                    snmp_community.py
                    ssh.py
                    staticroute.py
                    types_.py
                    virtual_ip.py
                    zone.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future/
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\backports/
                        datetime.py
                        misc.py
                        socket.py
                        socketserver.py
                        total_ordering.py
                        _markupbase.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\backports\email/
                            base64mime.py
                            charset.py
                            encoders.py
                            errors.py
                            feedparser.py
                            generator.py
                            header.py
                            headerregistry.py
                            iterators.py
                            message.py
                            parser.py
                            policy.py
                            quoprimime.py
                            utils.py
                            _encoded_words.py
                            _header_value_parser.py
                            _parseaddr.py
                            _policybase.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\backports\email\mime/
                                application.py
                                audio.py
                                base.py
                                image.py
                                message.py
                                multipart.py
                                nonmultipart.py
                                text.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\backports\html/
                            entities.py
                            parser.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\backports\http/
                            client.py
                            cookiejar.py
                            cookies.py
                            server.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\backports\test/
                            pystone.py
                            ssl_servers.py
                            support.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\backports\urllib/
                            error.py
                            parse.py
                            request.py
                            response.py
                            robotparser.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\backports\xmlrpc/
                            client.py
                            server.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\builtins/
                        disabled.py
                        iterators.py
                        misc.py
                        newnext.py
                        newround.py
                        newsuper.py
                        new_min_max.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\moves/
                        builtins.py
                        collections.py
                        configparser.py
                        copyreg.py
                        itertools.py
                        pickle.py
                        queue.py
                        reprlib.py
                        socketserver.py
                        subprocess.py
                        sys.py
                        winreg.py
                        _dummy_thread.py
                        _markupbase.py
                        _thread.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\moves\dbm/
                            dumb.py
                            gnu.py
                            ndbm.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\moves\html/
                            entities.py
                            parser.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\moves\http/
                            client.py
                            cookiejar.py
                            cookies.py
                            server.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\moves\test/
                            support.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\moves\tkinter/
                            colorchooser.py
                            commondialog.py
                            constants.py
                            dialog.py
                            dnd.py
                            filedialog.py
                            font.py
                            messagebox.py
                            scrolledtext.py
                            simpledialog.py
                            tix.py
                            ttk.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\moves\urllib/
                            error.py
                            parse.py
                            request.py
                            response.py
                            robotparser.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\moves\xmlrpc/
                            client.py
                            server.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\standard_library/
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\tests/
                        base.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\types/
                        newbytes.py
                        newdict.py
                        newint.py
                        newlist.py
                        newmemoryview.py
                        newobject.py
                        newopen.py
                        newrange.py
                        newstr.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\future\utils/
                        surrogateescape.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\idna/
                    codec.py
                    compat.py
                    core.py
                    idnadata.py
                    intranges.py
                    package_data.py
                    uts46data.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\libfuturize/
                    fixer_util.py
                    main.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\libfuturize\fixes/
                        fix_absolute_import.py
                        fix_add__future__imports_except_unicode_literals.py
                        fix_basestring.py
                        fix_bytes.py
                        fix_cmp.py
                        fix_division.py
                        fix_division_safe.py
                        fix_execfile.py
                        fix_future_builtins.py
                        fix_future_standard_library.py
                        fix_future_standard_library_urllib.py
                        fix_input.py
                        fix_metaclass.py
                        fix_next_call.py
                        fix_object.py
                        fix_oldstr_wrap.py
                        fix_order___future__imports.py
                        fix_print.py
                        fix_print_with_import.py
                        fix_raise.py
                        fix_remove_old__future__imports.py
                        fix_unicode_keep_u.py
                        fix_unicode_literals_import.py
                        fix_UserDict.py
                        fix_xrange_with_import.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\libpasteurize/
                    main.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\libpasteurize\fixes/
                        feature_base.py
                        fix_add_all_future_builtins.py
                        fix_add_all__future__imports.py
                        fix_add_future_standard_library_import.py
                        fix_annotations.py
                        fix_division.py
                        fix_features.py
                        fix_fullargspec.py
                        fix_future_builtins.py
                        fix_getcwd.py
                        fix_imports.py
                        fix_imports2.py
                        fix_kwargs.py
                        fix_memoryview.py
                        fix_metaclass.py
                        fix_newstyle.py
                        fix_next.py
                        fix_printfunction.py
                        fix_raise.py
                        fix_raise_.py
                        fix_throw.py
                        fix_unpacking.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\loguru/
                    _asyncio_loop.py
                    _better_exceptions.py
                    _colorama.py
                    _colorizer.py
                    _contextvars.py
                    _ctime_functions.py
                    _datetime.py
                    _defaults.py
                    _error_interceptor.py
                    _file_sink.py
                    _filters.py
                    _get_frame.py
                    _handler.py
                    _locks_machinery.py
                    _logger.py
                    _recattrs.py
                    _simple_sinks.py
                    _string_parsers.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\nacl/
                    encoding.py
                    exceptions.py
                    hash.py
                    hashlib.py
                    public.py
                    secret.py
                    signing.py
                    utils.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\nacl\bindings/
                        crypto_aead.py
                        crypto_box.py
                        crypto_core.py
                        crypto_generichash.py
                        crypto_hash.py
                        crypto_kx.py
                        crypto_pwhash.py
                        crypto_scalarmult.py
                        crypto_secretbox.py
                        crypto_secretstream.py
                        crypto_shorthash.py
                        crypto_sign.py
                        randombytes.py
                        sodium_core.py
                        utils.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\nacl\pwhash/
                        argon2i.py
                        argon2id.py
                        scrypt.py
                        _argon2.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko/
                    base_connection.py
                    channel.py
                    cisco_base_connection.py
                    exceptions.py
                    netmiko_globals.py
                    no_config.py
                    no_enable.py
                    scp_functions.py
                    scp_handler.py
                    session_log.py
                    snmp_autodetect.py
                    ssh_auth.py
                    ssh_autodetect.py
                    ssh_dispatcher.py
                    utilities.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\a10/
                        a10_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\accedian/
                        accedian_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\adtran/
                        adtran.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\adva/
                        adva_aos_fsp_150_f2.py
                        adva_aos_fsp_150_f3.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\alcatel/
                        alcatel_aos_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\allied_telesis/
                        allied_telesis_awplus.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\apresia/
                        apresia_aeos.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\arista/
                        arista.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\arris/
                        arris_cer.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\aruba/
                        aruba_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\audiocode/
                        audiocode_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\broadcom/
                        broadcom_icos_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\brocade/
                        brocade_fos_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\calix/
                        calix_b6.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\casa/
                        casa_cmts.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\cdot/
                        cdot_cros_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\centec/
                        centec_os.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\checkpoint/
                        checkpoint_gaia_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\ciena/
                        ciena_saos.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\cisco/
                        cisco_asa_ssh.py
                        cisco_ftd_ssh.py
                        cisco_ios.py
                        cisco_nxos_ssh.py
                        cisco_s200.py
                        cisco_s300.py
                        cisco_tp_tcce.py
                        cisco_viptela.py
                        cisco_wlc_ssh.py
                        cisco_xr.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\citrix/
                        netscaler_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\cli_tools/
                        netmiko_cfg.py
                        netmiko_grep.py
                        netmiko_show.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\cloudgenix/
                        cloudgenix_ion.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\coriant/
                        coriant_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\dell/
                        dell_dnos6.py
                        dell_force10_ssh.py
                        dell_isilon_ssh.py
                        dell_os10_ssh.py
                        dell_powerconnect.py
                        dell_sonic_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\dlink/
                        dlink_ds.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\eltex/
                        eltex_esr_ssh.py
                        eltex_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\endace/
                        endace_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\enterasys/
                        enterasys_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\ericsson/
                        ericsson_ipos.py
                        ericsson_mltn.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\extreme/
                        extreme_ers_ssh.py
                        extreme_exos.py
                        extreme_netiron.py
                        extreme_nos_ssh.py
                        extreme_slx_ssh.py
                        extreme_tierraos_ssh.py
                        extreme_vsp_ssh.py
                        extreme_wing_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\f5/
                        f5_linux_ssh.py
                        f5_tmsh_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\flexvnf/
                        flexvnf_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\fortinet/
                        fortinet_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\hillstone/
                        hillstone.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\hp/
                        hp_comware.py
                        hp_procurve.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\huawei/
                        huawei.py
                        huawei_smartax.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\ipinfusion/
                        ipinfusion_ocnos.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\juniper/
                        juniper.py
                        juniper_screenos.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\keymile/
                        keymile_nos_ssh.py
                        keymile_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\linux/
                        linux_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\mellanox/
                        mellanox_mlnxos_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\mikrotik/
                        mikrotik_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\mrv/
                        mrv_lx.py
                        mrv_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\netapp/
                        netapp_cdot_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\netgear/
                        netgear_prosafe_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\nokia/
                        nokia_srl.py
                        nokia_sros.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\oneaccess/
                        oneaccess_oneos.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\ovs/
                        ovs_linux_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\paloalto/
                        paloalto_panos.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\pluribus/
                        pluribus_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\quanta/
                        quanta_mesh_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\rad/
                        rad_etx.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\raisecom/
                        raisecom_roap.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\ruckus/
                        ruckus_fastiron.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\ruijie/
                        ruijie_os.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\sixwind/
                        sixwind_os.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\sophos/
                        sophos_sfos_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\supermicro/
                        smci_smis.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\teldat/
                        teldat_cit.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\terminal_server/
                        terminal_server.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\tplink/
                        tplink_jetstream.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\ubiquiti/
                        edgerouter_ssh.py
                        edge_ssh.py
                        unifiswitch_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\vyos/
                        vyos_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\watchguard/
                        fireware_ssh.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\yamaha/
                        yamaha.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\zte/
                        zte_zxros.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\netmiko\zyxel/
                        zyxel_ssh.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\ntc_templates/
                    parse.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy/
                    conftest.py
                    ctypeslib.py
                    dtypes.py
                    exceptions.py
                    matlib.py
                    version.py
                    _distributor_init.py
                    _globals.py
                    _pytesttester.py
                    __config__.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\array_api/
                        linalg.py
                        setup.py
                        _array_object.py
                        _constants.py
                        _creation_functions.py
                        _data_type_functions.py
                        _dtypes.py
                        _elementwise_functions.py
                        _indexing_functions.py
                        _manipulation_functions.py
                        _searching_functions.py
                        _set_functions.py
                        _sorting_functions.py
                        _statistical_functions.py
                        _typing.py
                        _utility_functions.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\array_api\tests/
                            test_array_object.py
                            test_creation_functions.py
                            test_data_type_functions.py
                            test_elementwise_functions.py
                            test_indexing_functions.py
                            test_manipulation_functions.py
                            test_set_functions.py
                            test_sorting_functions.py
                            test_validation.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\compat/
                        py3k.py
                        setup.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\compat\tests/
                            test_compat.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\core/
                        arrayprint.py
                        cversions.py
                        defchararray.py
                        einsumfunc.py
                        fromnumeric.py
                        function_base.py
                        getlimits.py
                        memmap.py
                        multiarray.py
                        numeric.py
                        numerictypes.py
                        overrides.py
                        records.py
                        shape_base.py
                        umath.py
                        umath_tests.py
                        _add_newdocs.py
                        _add_newdocs_scalars.py
                        _asarray.py
                        _dtype.py
                        _dtype_ctypes.py
                        _exceptions.py
                        _internal.py
                        _machar.py
                        _methods.py
                        _string_helpers.py
                        _type_aliases.py
                        _ufunc_config.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\core\tests/
                            test_abc.py
                            test_api.py
                            test_argparse.py
                            test_arraymethod.py
                            test_arrayprint.py
                            test_array_coercion.py
                            test_array_interface.py
                            test_casting_floatingpoint_errors.py
                            test_casting_unittests.py
                            test_conversion_utils.py
                            test_cpu_dispatcher.py
                            test_cpu_features.py
                            test_custom_dtypes.py
                            test_cython.py
                            test_datetime.py
                            test_defchararray.py
                            test_deprecations.py
                            test_dlpack.py
                            test_dtype.py
                            test_einsum.py
                            test_errstate.py
                            test_extint128.py
                            test_function_base.py
                            test_getlimits.py
                            test_half.py
                            test_hashtable.py
                            test_indexerrors.py
                            test_indexing.py
                            test_item_selection.py
                            test_limited_api.py
                            test_longdouble.py
                            test_machar.py
                            test_memmap.py
                            test_mem_overlap.py
                            test_mem_policy.py
                            test_multiarray.py
                            test_nditer.py
                            test_nep50_promotions.py
                            test_numeric.py
                            test_numerictypes.py
                            test_numpy_2_0_compat.py
                            test_overrides.py
                            test_print.py
                            test_protocols.py
                            test_records.py
                            test_regression.py
                            test_scalarbuffer.py
                            test_scalarinherit.py
                            test_scalarmath.py
                            test_scalarprint.py
                            test_scalar_ctors.py
                            test_scalar_methods.py
                            test_shape_base.py
                            test_simd.py
                            test_simd_module.py
                            test_strings.py
                            test_ufunc.py
                            test_umath.py
                            test_umath_accuracy.py
                            test_umath_complex.py
                            test_unicode.py
                            test__exceptions.py
                            _locales.py
                            __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\core\tests\examples\cython/
                                    setup.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\core\tests\examples\limited_api/
                                    setup.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\doc/
                        constants.py
                        ufuncs.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\f2py/
                        auxfuncs.py
                        capi_maps.py
                        cb_rules.py
                        cfuncs.py
                        common_rules.py
                        crackfortran.py
                        diagnose.py
                        f2py2e.py
                        f90mod_rules.py
                        func2subr.py
                        rules.py
                        setup.py
                        symbolic.py
                        use_rules.py
                        _isocbind.py
                        __init__.py
                        __main__.py
                        __version__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\f2py\tests/
                            test_abstract_interface.py
                            test_array_from_pyobj.py
                            test_assumed_shape.py
                            test_block_docstring.py
                            test_callback.py
                            test_character.py
                            test_common.py
                            test_compile_function.py
                            test_crackfortran.py
                            test_data.py
                            test_docs.py
                            test_f2cmap.py
                            test_f2py2e.py
                            test_isoc.py
                            test_kind.py
                            test_mixed.py
                            test_module_doc.py
                            test_parameter.py
                            test_quoted_character.py
                            test_regression.py
                            test_return_character.py
                            test_return_complex.py
                            test_return_integer.py
                            test_return_logical.py
                            test_return_real.py
                            test_semicolon_split.py
                            test_size.py
                            test_string.py
                            test_symbolic.py
                            test_value_attrspec.py
                            util.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\f2py\_backends/
                            _backend.py
                            _distutils.py
                            _meson.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\fft/
                        helper.py
                        _pocketfft.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\fft\tests/
                            test_helper.py
                            test_pocketfft.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\lib/
                        arraypad.py
                        arraysetops.py
                        arrayterator.py
                        format.py
                        function_base.py
                        histograms.py
                        index_tricks.py
                        mixins.py
                        nanfunctions.py
                        npyio.py
                        polynomial.py
                        recfunctions.py
                        scimath.py
                        setup.py
                        shape_base.py
                        stride_tricks.py
                        twodim_base.py
                        type_check.py
                        ufunclike.py
                        user_array.py
                        utils.py
                        _datasource.py
                        _iotools.py
                        _version.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\lib\tests/
                            test_arraypad.py
                            test_arraysetops.py
                            test_arrayterator.py
                            test_financial_expired.py
                            test_format.py
                            test_function_base.py
                            test_histograms.py
                            test_index_tricks.py
                            test_io.py
                            test_loadtxt.py
                            test_mixins.py
                            test_nanfunctions.py
                            test_packbits.py
                            test_polynomial.py
                            test_recfunctions.py
                            test_regression.py
                            test_shape_base.py
                            test_stride_tricks.py
                            test_twodim_base.py
                            test_type_check.py
                            test_ufunclike.py
                            test_utils.py
                            test__datasource.py
                            test__iotools.py
                            test__version.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\linalg/
                        linalg.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\linalg\tests/
                            test_deprecations.py
                            test_linalg.py
                            test_regression.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\ma/
                        core.py
                        extras.py
                        mrecords.py
                        setup.py
                        testutils.py
                        timer_comparison.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\ma\tests/
                            test_core.py
                            test_deprecations.py
                            test_extras.py
                            test_mrecords.py
                            test_old_ma.py
                            test_regression.py
                            test_subclassing.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\matrixlib/
                        defmatrix.py
                        setup.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\matrixlib\tests/
                            test_defmatrix.py
                            test_interaction.py
                            test_masked_matrix.py
                            test_matrix_linalg.py
                            test_multiarray.py
                            test_numeric.py
                            test_regression.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\polynomial/
                        chebyshev.py
                        hermite.py
                        hermite_e.py
                        laguerre.py
                        legendre.py
                        polynomial.py
                        polyutils.py
                        setup.py
                        _polybase.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\polynomial\tests/
                            test_chebyshev.py
                            test_classes.py
                            test_hermite.py
                            test_hermite_e.py
                            test_laguerre.py
                            test_legendre.py
                            test_polynomial.py
                            test_polyutils.py
                            test_printing.py
                            test_symbol.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\random/
                        _pickle.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\random\tests/
                            test_direct.py
                            test_extending.py
                            test_generator_mt19937.py
                            test_generator_mt19937_regressions.py
                            test_random.py
                            test_randomstate.py
                            test_randomstate_regression.py
                            test_regression.py
                            test_seed_sequence.py
                            test_smoke.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\random\tests\data/
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\random\_examples\cffi/
                                extending.py
                                parse.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\random\_examples\numba/
                                extending.py
                                extending_distributions.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\testing/
                        overrides.py
                        print_coercion_tables.py
                        setup.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\testing\tests/
                            test_utils.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\testing\_private/
                            extbuild.py
                            utils.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\tests/
                        test_ctypeslib.py
                        test_lazyloading.py
                        test_matlib.py
                        test_numpy_config.py
                        test_numpy_version.py
                        test_public_api.py
                        test_reloading.py
                        test_scripts.py
                        test_warnings.py
                        test__all__.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\typing/
                        mypy_plugin.py
                        setup.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\typing\tests/
                            test_isfile.py
                            test_runtime.py
                            test_typing.py
                            __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\typing\tests\data\pass/
                                    arithmetic.py
                                    arrayprint.py
                                    arrayterator.py
                                    array_constructors.py
                                    array_like.py
                                    bitwise_ops.py
                                    comparisons.py
                                    dtype.py
                                    einsumfunc.py
                                    flatiter.py
                                    fromnumeric.py
                                    index_tricks.py
                                    lib_utils.py
                                    lib_version.py
                                    literal.py
                                    mod.py
                                    modules.py
                                    multiarray.py
                                    ndarray_conversion.py
                                    ndarray_misc.py
                                    ndarray_shape_manipulation.py
                                    numeric.py
                                    numerictypes.py
                                    random.py
                                    scalars.py
                                    simple.py
                                    simple_py3.py
                                    ufunclike.py
                                    ufuncs.py
                                    ufunc_config.py
                                    warnings_and_errors.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\_core/
                        multiarray.py
                        umath.py
                        _dtype.py
                        _dtype_ctypes.py
                        _internal.py
                        _multiarray_umath.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\_pyinstaller/
                        hook-numpy.py
                        pyinstaller-smoke.py
                        test_pyinstaller.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\_typing/
                        setup.py
                        _add_docstring.py
                        _array_like.py
                        _char_codes.py
                        _dtype_like.py
                        _extended_precision.py
                        _nbit.py
                        _nested_sequence.py
                        _scalars.py
                        _shape.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\numpy\_utils/
                        _convertions.py
                        _inspect.py
                        _pep440.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas/
                    conftest.py
                    testing.py
                    _typing.py
                    _version.py
                    _version_meson.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\api/
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\api\extensions/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\api\indexers/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\api\interchange/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\api\types/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\api\typing/
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\arrays/
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\compat/
                        compressors.py
                        pickle_compat.py
                        pyarrow.py
                        _constants.py
                        _optional.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\compat\numpy/
                            function.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core/
                        accessor.py
                        algorithms.py
                        api.py
                        apply.py
                        arraylike.py
                        base.py
                        common.py
                        config_init.py
                        construction.py
                        flags.py
                        frame.py
                        generic.py
                        indexing.py
                        missing.py
                        nanops.py
                        resample.py
                        roperator.py
                        sample.py
                        series.py
                        shared_docs.py
                        sorting.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\arrays/
                            base.py
                            boolean.py
                            categorical.py
                            datetimelike.py
                            datetimes.py
                            floating.py
                            integer.py
                            interval.py
                            masked.py
                            numeric.py
                            numpy_.py
                            period.py
                            string_.py
                            string_arrow.py
                            timedeltas.py
                            _arrow_string_mixins.py
                            _mixins.py
                            _ranges.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\arrays\arrow/
                                array.py
                                extension_types.py
                                _arrow_utils.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\arrays\sparse/
                                accessor.py
                                array.py
                                scipy_sparse.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\array_algos/
                            datetimelike_accumulations.py
                            masked_accumulations.py
                            masked_reductions.py
                            putmask.py
                            quantile.py
                            replace.py
                            take.py
                            transforms.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\computation/
                            align.py
                            api.py
                            check.py
                            common.py
                            engines.py
                            eval.py
                            expr.py
                            expressions.py
                            ops.py
                            parsing.py
                            pytables.py
                            scope.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\dtypes/
                            api.py
                            astype.py
                            base.py
                            cast.py
                            common.py
                            concat.py
                            dtypes.py
                            generic.py
                            inference.py
                            missing.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\groupby/
                            base.py
                            categorical.py
                            generic.py
                            groupby.py
                            grouper.py
                            indexing.py
                            numba_.py
                            ops.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\indexers/
                            objects.py
                            utils.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\indexes/
                            accessors.py
                            api.py
                            base.py
                            category.py
                            datetimelike.py
                            datetimes.py
                            extension.py
                            frozen.py
                            interval.py
                            multi.py
                            period.py
                            range.py
                            timedeltas.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\interchange/
                            buffer.py
                            column.py
                            dataframe.py
                            dataframe_protocol.py
                            from_dataframe.py
                            utils.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\internals/
                            api.py
                            array_manager.py
                            base.py
                            blocks.py
                            concat.py
                            construction.py
                            managers.py
                            ops.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\methods/
                            describe.py
                            selectn.py
                            to_dict.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\ops/
                            array_ops.py
                            common.py
                            dispatch.py
                            docstrings.py
                            invalid.py
                            mask_ops.py
                            missing.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\reshape/
                            api.py
                            concat.py
                            encoding.py
                            melt.py
                            merge.py
                            pivot.py
                            reshape.py
                            tile.py
                            util.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\sparse/
                            api.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\strings/
                            accessor.py
                            base.py
                            object_array.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\tools/
                            datetimes.py
                            numeric.py
                            timedeltas.py
                            times.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\util/
                            hashing.py
                            numba_.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\window/
                            common.py
                            doc.py
                            ewm.py
                            expanding.py
                            numba_.py
                            online.py
                            rolling.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\_numba/
                            executor.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\core\_numba\kernels/
                                mean_.py
                                min_max_.py
                                shared.py
                                sum_.py
                                var_.py
                                __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\errors/
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\io/
                        api.py
                        clipboards.py
                        common.py
                        feather_format.py
                        gbq.py
                        html.py
                        orc.py
                        parquet.py
                        pickle.py
                        pytables.py
                        spss.py
                        sql.py
                        stata.py
                        xml.py
                        _util.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\io\clipboard/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\io\excel/
                            _base.py
                            _odfreader.py
                            _odswriter.py
                            _openpyxl.py
                            _pyxlsb.py
                            _util.py
                            _xlrd.py
                            _xlsxwriter.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\io\formats/
                            console.py
                            css.py
                            csvs.py
                            excel.py
                            format.py
                            html.py
                            info.py
                            printing.py
                            string.py
                            style.py
                            style_render.py
                            xml.py
                            _color_data.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\io\json/
                            _json.py
                            _normalize.py
                            _table_schema.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\io\parsers/
                            arrow_parser_wrapper.py
                            base_parser.py
                            c_parser_wrapper.py
                            python_parser.py
                            readers.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\io\sas/
                            sas7bdat.py
                            sasreader.py
                            sas_constants.py
                            sas_xport.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\plotting/
                        _core.py
                        _misc.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\plotting\_matplotlib/
                            boxplot.py
                            converter.py
                            core.py
                            groupby.py
                            hist.py
                            misc.py
                            style.py
                            timeseries.py
                            tools.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests/
                        test_aggregation.py
                        test_algos.py
                        test_common.py
                        test_downstream.py
                        test_errors.py
                        test_expressions.py
                        test_flags.py
                        test_multilevel.py
                        test_nanops.py
                        test_optional_dependency.py
                        test_register_accessor.py
                        test_sorting.py
                        test_take.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\api/
                            test_api.py
                            test_types.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\apply/
                            common.py
                            conftest.py
                            test_frame_apply.py
                            test_frame_apply_relabeling.py
                            test_frame_transform.py
                            test_invalid_arg.py
                            test_series_apply.py
                            test_series_apply_relabeling.py
                            test_series_transform.py
                            test_str.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arithmetic/
                            common.py
                            conftest.py
                            test_array_ops.py
                            test_categorical.py
                            test_datetime64.py
                            test_interval.py
                            test_numeric.py
                            test_object.py
                            test_period.py
                            test_timedelta64.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays/
                            masked_shared.py
                            test_array.py
                            test_datetimelike.py
                            test_datetimes.py
                            test_ndarray_backed.py
                            test_period.py
                            test_timedeltas.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\boolean/
                                test_arithmetic.py
                                test_astype.py
                                test_comparison.py
                                test_construction.py
                                test_function.py
                                test_indexing.py
                                test_logical.py
                                test_ops.py
                                test_reduction.py
                                test_repr.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\categorical/
                                conftest.py
                                test_algos.py
                                test_analytics.py
                                test_api.py
                                test_astype.py
                                test_constructors.py
                                test_dtypes.py
                                test_indexing.py
                                test_map.py
                                test_missing.py
                                test_operators.py
                                test_replace.py
                                test_repr.py
                                test_sorting.py
                                test_subclass.py
                                test_take.py
                                test_warnings.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\datetimes/
                                test_constructors.py
                                test_cumulative.py
                                test_reductions.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\floating/
                                conftest.py
                                test_arithmetic.py
                                test_astype.py
                                test_comparison.py
                                test_concat.py
                                test_construction.py
                                test_contains.py
                                test_function.py
                                test_repr.py
                                test_to_numpy.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\integer/
                                conftest.py
                                test_arithmetic.py
                                test_comparison.py
                                test_concat.py
                                test_construction.py
                                test_dtypes.py
                                test_function.py
                                test_indexing.py
                                test_reduction.py
                                test_repr.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\interval/
                                test_astype.py
                                test_interval.py
                                test_ops.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\masked/
                                test_arithmetic.py
                                test_arrow_compat.py
                                test_function.py
                                test_indexing.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\numpy_/
                                test_indexing.py
                                test_numpy.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\period/
                                test_arrow_compat.py
                                test_astype.py
                                test_constructors.py
                                test_reductions.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\sparse/
                                test_accessor.py
                                test_arithmetics.py
                                test_array.py
                                test_astype.py
                                test_combine_concat.py
                                test_constructors.py
                                test_dtype.py
                                test_indexing.py
                                test_libsparse.py
                                test_reductions.py
                                test_unary.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\string_/
                                test_string.py
                                test_string_arrow.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\arrays\timedeltas/
                                test_constructors.py
                                test_cumulative.py
                                test_reductions.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\base/
                            common.py
                            test_constructors.py
                            test_conversion.py
                            test_fillna.py
                            test_misc.py
                            test_transpose.py
                            test_unique.py
                            test_value_counts.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\computation/
                            test_compat.py
                            test_eval.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\config/
                            test_config.py
                            test_localization.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\construction/
                            test_extract_array.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\copy_view/
                            test_array.py
                            test_astype.py
                            test_clip.py
                            test_constructors.py
                            test_core_functionalities.py
                            test_functions.py
                            test_indexing.py
                            test_internals.py
                            test_interp_fillna.py
                            test_methods.py
                            test_replace.py
                            test_setitem.py
                            test_util.py
                            util.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\copy_view\index/
                                test_datetimeindex.py
                                test_index.py
                                test_periodindex.py
                                test_timedeltaindex.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\dtypes/
                            test_common.py
                            test_concat.py
                            test_dtypes.py
                            test_generic.py
                            test_inference.py
                            test_missing.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\dtypes\cast/
                                test_can_hold_element.py
                                test_construct_from_scalar.py
                                test_construct_ndarray.py
                                test_construct_object_arr.py
                                test_dict_compat.py
                                test_downcast.py
                                test_find_common_type.py
                                test_infer_datetimelike.py
                                test_infer_dtype.py
                                test_maybe_box_native.py
                                test_promote.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\extension/
                            conftest.py
                            test_arrow.py
                            test_categorical.py
                            test_common.py
                            test_datetime.py
                            test_extension.py
                            test_interval.py
                            test_masked.py
                            test_numpy.py
                            test_period.py
                            test_sparse.py
                            test_string.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\extension\array_with_attr/
                                array.py
                                test_array_with_attr.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\extension\base/
                                accumulate.py
                                base.py
                                casting.py
                                constructors.py
                                dim2.py
                                dtype.py
                                getitem.py
                                groupby.py
                                index.py
                                interface.py
                                io.py
                                methods.py
                                missing.py
                                ops.py
                                printing.py
                                reduce.py
                                reshaping.py
                                setitem.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\extension\date/
                                array.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\extension\decimal/
                                array.py
                                test_decimal.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\extension\json/
                                array.py
                                test_json.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\extension\list/
                                array.py
                                test_list.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\frame/
                            common.py
                            conftest.py
                            test_alter_axes.py
                            test_api.py
                            test_arithmetic.py
                            test_block_internals.py
                            test_constructors.py
                            test_cumulative.py
                            test_iteration.py
                            test_logical_ops.py
                            test_nonunique_indexes.py
                            test_npfuncs.py
                            test_query_eval.py
                            test_reductions.py
                            test_repr_info.py
                            test_stack_unstack.py
                            test_subclass.py
                            test_ufunc.py
                            test_unary.py
                            test_validate.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\frame\constructors/
                                test_from_dict.py
                                test_from_records.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\frame\indexing/
                                test_coercion.py
                                test_delitem.py
                                test_get.py
                                test_getitem.py
                                test_get_value.py
                                test_indexing.py
                                test_insert.py
                                test_mask.py
                                test_setitem.py
                                test_set_value.py
                                test_take.py
                                test_where.py
                                test_xs.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\frame\methods/
                                test_add_prefix_suffix.py
                                test_align.py
                                test_asfreq.py
                                test_asof.py
                                test_assign.py
                                test_astype.py
                                test_at_time.py
                                test_between_time.py
                                test_clip.py
                                test_combine.py
                                test_combine_first.py
                                test_compare.py
                                test_convert_dtypes.py
                                test_copy.py
                                test_count.py
                                test_cov_corr.py
                                test_describe.py
                                test_diff.py
                                test_dot.py
                                test_drop.py
                                test_droplevel.py
                                test_dropna.py
                                test_drop_duplicates.py
                                test_dtypes.py
                                test_duplicated.py
                                test_equals.py
                                test_explode.py
                                test_fillna.py
                                test_filter.py
                                test_first_and_last.py
                                test_first_valid_index.py
                                test_get_numeric_data.py
                                test_head_tail.py
                                test_infer_objects.py
                                test_interpolate.py
                                test_isetitem.py
                                test_isin.py
                                test_is_homogeneous_dtype.py
                                test_iterrows.py
                                test_join.py
                                test_map.py
                                test_matmul.py
                                test_nlargest.py
                                test_pct_change.py
                                test_pipe.py
                                test_pop.py
                                test_quantile.py
                                test_rank.py
                                test_reindex.py
                                test_reindex_like.py
                                test_rename.py
                                test_rename_axis.py
                                test_reorder_levels.py
                                test_replace.py
                                test_reset_index.py
                                test_round.py
                                test_sample.py
                                test_select_dtypes.py
                                test_set_axis.py
                                test_set_index.py
                                test_shift.py
                                test_size.py
                                test_sort_index.py
                                test_sort_values.py
                                test_swapaxes.py
                                test_swaplevel.py
                                test_to_csv.py
                                test_to_dict.py
                                test_to_dict_of_blocks.py
                                test_to_numpy.py
                                test_to_period.py
                                test_to_records.py
                                test_to_timestamp.py
                                test_transpose.py
                                test_truncate.py
                                test_tz_convert.py
                                test_tz_localize.py
                                test_update.py
                                test_values.py
                                test_value_counts.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\generic/
                            test_duplicate_labels.py
                            test_finalize.py
                            test_frame.py
                            test_generic.py
                            test_label_or_level_utils.py
                            test_series.py
                            test_to_xarray.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\groupby/
                            conftest.py
                            test_any_all.py
                            test_api.py
                            test_apply.py
                            test_apply_mutate.py
                            test_bin_groupby.py
                            test_categorical.py
                            test_counting.py
                            test_filters.py
                            test_function.py
                            test_groupby.py
                            test_groupby_dropna.py
                            test_groupby_shift_diff.py
                            test_groupby_subclass.py
                            test_grouping.py
                            test_indexing.py
                            test_index_as_string.py
                            test_libgroupby.py
                            test_min_max.py
                            test_missing.py
                            test_nth.py
                            test_numba.py
                            test_nunique.py
                            test_pipe.py
                            test_quantile.py
                            test_raises.py
                            test_rank.py
                            test_sample.py
                            test_size.py
                            test_skew.py
                            test_timegrouper.py
                            test_value_counts.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\groupby\aggregate/
                                test_aggregate.py
                                test_cython.py
                                test_numba.py
                                test_other.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\groupby\transform/
                                test_numba.py
                                test_transform.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes/
                            conftest.py
                            test_any_index.py
                            test_base.py
                            test_common.py
                            test_datetimelike.py
                            test_engines.py
                            test_frozen.py
                            test_indexing.py
                            test_index_new.py
                            test_numpy_compat.py
                            test_old_base.py
                            test_setops.py
                            test_subclass.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\base_class/
                                test_constructors.py
                                test_formats.py
                                test_indexing.py
                                test_pickle.py
                                test_reshape.py
                                test_setops.py
                                test_where.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\categorical/
                                test_append.py
                                test_astype.py
                                test_category.py
                                test_constructors.py
                                test_equals.py
                                test_fillna.py
                                test_formats.py
                                test_indexing.py
                                test_map.py
                                test_reindex.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\datetimelike_/
                                test_drop_duplicates.py
                                test_equals.py
                                test_indexing.py
                                test_is_monotonic.py
                                test_nat.py
                                test_sort_values.py
                                test_value_counts.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\datetimes/
                                test_asof.py
                                test_constructors.py
                                test_datetime.py
                                test_datetimelike.py
                                test_date_range.py
                                test_delete.py
                                test_formats.py
                                test_freq_attr.py
                                test_indexing.py
                                test_join.py
                                test_map.py
                                test_misc.py
                                test_npfuncs.py
                                test_ops.py
                                test_partial_slicing.py
                                test_pickle.py
                                test_reindex.py
                                test_scalar_compat.py
                                test_setops.py
                                test_timezones.py
                                test_unique.py
                                __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\datetimes\methods/
                                    test_astype.py
                                    test_factorize.py
                                    test_fillna.py
                                    test_insert.py
                                    test_isocalendar.py
                                    test_repeat.py
                                    test_shift.py
                                    test_snap.py
                                    test_to_frame.py
                                    test_to_period.py
                                    test_to_series.py
                                    __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\interval/
                                test_astype.py
                                test_base.py
                                test_constructors.py
                                test_equals.py
                                test_formats.py
                                test_indexing.py
                                test_interval.py
                                test_interval_range.py
                                test_interval_tree.py
                                test_join.py
                                test_pickle.py
                                test_setops.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\multi/
                                conftest.py
                                test_analytics.py
                                test_astype.py
                                test_compat.py
                                test_constructors.py
                                test_conversion.py
                                test_copy.py
                                test_drop.py
                                test_duplicates.py
                                test_equivalence.py
                                test_formats.py
                                test_get_level_values.py
                                test_get_set.py
                                test_indexing.py
                                test_integrity.py
                                test_isin.py
                                test_join.py
                                test_lexsort.py
                                test_missing.py
                                test_monotonic.py
                                test_names.py
                                test_partial_indexing.py
                                test_pickle.py
                                test_reindex.py
                                test_reshape.py
                                test_setops.py
                                test_sorting.py
                                test_take.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\numeric/
                                test_astype.py
                                test_indexing.py
                                test_join.py
                                test_numeric.py
                                test_setops.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\object/
                                test_astype.py
                                test_indexing.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\period/
                                test_constructors.py
                                test_formats.py
                                test_freq_attr.py
                                test_indexing.py
                                test_join.py
                                test_monotonic.py
                                test_partial_slicing.py
                                test_period.py
                                test_period_range.py
                                test_pickle.py
                                test_resolution.py
                                test_scalar_compat.py
                                test_searchsorted.py
                                test_setops.py
                                test_tools.py
                                __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\period\methods/
                                    test_asfreq.py
                                    test_astype.py
                                    test_factorize.py
                                    test_fillna.py
                                    test_insert.py
                                    test_is_full.py
                                    test_repeat.py
                                    test_shift.py
                                    test_to_timestamp.py
                                    __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\ranges/
                                test_constructors.py
                                test_indexing.py
                                test_join.py
                                test_range.py
                                test_setops.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\timedeltas/
                                test_constructors.py
                                test_delete.py
                                test_formats.py
                                test_freq_attr.py
                                test_indexing.py
                                test_join.py
                                test_ops.py
                                test_pickle.py
                                test_scalar_compat.py
                                test_searchsorted.py
                                test_setops.py
                                test_timedelta.py
                                test_timedelta_range.py
                                __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexes\timedeltas\methods/
                                    test_astype.py
                                    test_factorize.py
                                    test_fillna.py
                                    test_insert.py
                                    test_repeat.py
                                    test_shift.py
                                    __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexing/
                            common.py
                            conftest.py
                            test_at.py
                            test_categorical.py
                            test_chaining_and_caching.py
                            test_check_indexer.py
                            test_coercion.py
                            test_datetime.py
                            test_floats.py
                            test_iat.py
                            test_iloc.py
                            test_indexers.py
                            test_indexing.py
                            test_loc.py
                            test_na_indexing.py
                            test_partial.py
                            test_scalar.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexing\interval/
                                test_interval.py
                                test_interval_new.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\indexing\multiindex/
                                test_chaining_and_caching.py
                                test_datetime.py
                                test_getitem.py
                                test_iloc.py
                                test_indexing_slow.py
                                test_loc.py
                                test_multiindex.py
                                test_partial.py
                                test_setitem.py
                                test_slice.py
                                test_sorted.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\interchange/
                            test_impl.py
                            test_spec_conformance.py
                            test_utils.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\internals/
                            test_api.py
                            test_internals.py
                            test_managers.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io/
                            conftest.py
                            generate_legacy_storage_files.py
                            test_clipboard.py
                            test_common.py
                            test_compression.py
                            test_feather.py
                            test_fsspec.py
                            test_gcs.py
                            test_html.py
                            test_orc.py
                            test_parquet.py
                            test_pickle.py
                            test_s3.py
                            test_spss.py
                            test_sql.py
                            test_stata.py
                            test_user_agent.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\excel/
                                conftest.py
                                test_odf.py
                                test_odswriter.py
                                test_openpyxl.py
                                test_readers.py
                                test_style.py
                                test_writers.py
                                test_xlrd.py
                                test_xlsxwriter.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\formats/
                                test_console.py
                                test_css.py
                                test_eng_formatting.py
                                test_format.py
                                test_info.py
                                test_printing.py
                                test_series_info.py
                                test_to_csv.py
                                test_to_excel.py
                                test_to_html.py
                                test_to_latex.py
                                test_to_markdown.py
                                test_to_string.py
                                __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\formats\style/
                                    test_bar.py
                                    test_exceptions.py
                                    test_format.py
                                    test_highlight.py
                                    test_html.py
                                    test_matplotlib.py
                                    test_non_unique.py
                                    test_style.py
                                    test_tooltip.py
                                    test_to_latex.py
                                    test_to_string.py
                                    __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\json/
                                conftest.py
                                test_compression.py
                                test_deprecated_kwargs.py
                                test_json_table_schema.py
                                test_json_table_schema_ext_dtype.py
                                test_normalize.py
                                test_pandas.py
                                test_readlines.py
                                test_ujson.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\parser/
                                conftest.py
                                test_comment.py
                                test_compression.py
                                test_concatenate_chunks.py
                                test_converters.py
                                test_c_parser_only.py
                                test_dialect.py
                                test_encoding.py
                                test_header.py
                                test_index_col.py
                                test_mangle_dupes.py
                                test_multi_thread.py
                                test_na_values.py
                                test_network.py
                                test_parse_dates.py
                                test_python_parser_only.py
                                test_quoting.py
                                test_read_fwf.py
                                test_skiprows.py
                                test_textreader.py
                                test_unsupported.py
                                test_upcast.py
                                __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\parser\common/
                                    test_chunksize.py
                                    test_common_basic.py
                                    test_data_list.py
                                    test_decimal.py
                                    test_file_buffer_url.py
                                    test_float.py
                                    test_index.py
                                    test_inf.py
                                    test_ints.py
                                    test_iterator.py
                                    test_read_errors.py
                                    test_verbose.py
                                    __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\parser\dtypes/
                                    test_categorical.py
                                    test_dtypes_basic.py
                                    test_empty.py
                                    __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\parser\usecols/
                                    test_parse_dates.py
                                    test_strings.py
                                    test_usecols_basic.py
                                    __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\pytables/
                                common.py
                                conftest.py
                                test_append.py
                                test_categorical.py
                                test_compat.py
                                test_complex.py
                                test_errors.py
                                test_file_handling.py
                                test_keys.py
                                test_put.py
                                test_pytables_missing.py
                                test_read.py
                                test_retain_attributes.py
                                test_round_trip.py
                                test_select.py
                                test_store.py
                                test_subclass.py
                                test_timezones.py
                                test_time_series.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\sas/
                                test_byteswap.py
                                test_sas.py
                                test_sas7bdat.py
                                test_xport.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\io\xml/
                                conftest.py
                                test_to_xml.py
                                test_xml.py
                                test_xml_dtypes.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\libs/
                            test_hashtable.py
                            test_join.py
                            test_lib.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\plotting/
                            common.py
                            conftest.py
                            test_backend.py
                            test_boxplot_method.py
                            test_common.py
                            test_converter.py
                            test_datetimelike.py
                            test_groupby.py
                            test_hist_method.py
                            test_misc.py
                            test_series.py
                            test_style.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\plotting\frame/
                                test_frame.py
                                test_frame_color.py
                                test_frame_groupby.py
                                test_frame_legend.py
                                test_frame_subplots.py
                                test_hist_box_by.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\reductions/
                            test_reductions.py
                            test_stat_reductions.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\resample/
                            conftest.py
                            test_base.py
                            test_datetime_index.py
                            test_period_index.py
                            test_resampler_grouper.py
                            test_resample_api.py
                            test_timedelta.py
                            test_time_grouper.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\reshape/
                            test_crosstab.py
                            test_cut.py
                            test_from_dummies.py
                            test_get_dummies.py
                            test_melt.py
                            test_pivot.py
                            test_pivot_multilevel.py
                            test_qcut.py
                            test_union_categoricals.py
                            test_util.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\reshape\concat/
                                conftest.py
                                test_append.py
                                test_append_common.py
                                test_categorical.py
                                test_concat.py
                                test_dataframe.py
                                test_datetimes.py
                                test_empty.py
                                test_index.py
                                test_invalid.py
                                test_series.py
                                test_sort.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\reshape\merge/
                                test_join.py
                                test_merge.py
                                test_merge_asof.py
                                test_merge_cross.py
                                test_merge_index_as_string.py
                                test_merge_ordered.py
                                test_multi.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\scalar/
                            test_nat.py
                            test_na_scalar.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\scalar\interval/
                                test_arithmetic.py
                                test_interval.py
                                test_ops.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\scalar\period/
                                test_asfreq.py
                                test_period.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\scalar\timedelta/
                                test_arithmetic.py
                                test_constructors.py
                                test_formats.py
                                test_timedelta.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\scalar\timestamp/
                                test_arithmetic.py
                                test_comparisons.py
                                test_constructors.py
                                test_formats.py
                                test_rendering.py
                                test_timestamp.py
                                test_timezones.py
                                test_unary_ops.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\series/
                            test_api.py
                            test_arithmetic.py
                            test_constructors.py
                            test_cumulative.py
                            test_iteration.py
                            test_logical_ops.py
                            test_missing.py
                            test_npfuncs.py
                            test_reductions.py
                            test_repr.py
                            test_subclass.py
                            test_ufunc.py
                            test_unary.py
                            test_validate.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\series\accessors/
                                test_cat_accessor.py
                                test_dt_accessor.py
                                test_sparse_accessor.py
                                test_str_accessor.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\series\indexing/
                                test_datetime.py
                                test_delitem.py
                                test_get.py
                                test_getitem.py
                                test_indexing.py
                                test_mask.py
                                test_setitem.py
                                test_set_value.py
                                test_take.py
                                test_where.py
                                test_xs.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\series\methods/
                                test_add_prefix_suffix.py
                                test_align.py
                                test_argsort.py
                                test_asof.py
                                test_astype.py
                                test_autocorr.py
                                test_between.py
                                test_clip.py
                                test_combine.py
                                test_combine_first.py
                                test_compare.py
                                test_convert_dtypes.py
                                test_copy.py
                                test_count.py
                                test_cov_corr.py
                                test_describe.py
                                test_diff.py
                                test_drop.py
                                test_dropna.py
                                test_drop_duplicates.py
                                test_dtypes.py
                                test_duplicated.py
                                test_equals.py
                                test_explode.py
                                test_fillna.py
                                test_get_numeric_data.py
                                test_head_tail.py
                                test_infer_objects.py
                                test_interpolate.py
                                test_isin.py
                                test_isna.py
                                test_is_monotonic.py
                                test_is_unique.py
                                test_item.py
                                test_map.py
                                test_matmul.py
                                test_nlargest.py
                                test_nunique.py
                                test_pct_change.py
                                test_pop.py
                                test_quantile.py
                                test_rank.py
                                test_reindex.py
                                test_reindex_like.py
                                test_rename.py
                                test_rename_axis.py
                                test_repeat.py
                                test_replace.py
                                test_reset_index.py
                                test_round.py
                                test_searchsorted.py
                                test_set_name.py
                                test_size.py
                                test_sort_index.py
                                test_sort_values.py
                                test_tolist.py
                                test_to_csv.py
                                test_to_dict.py
                                test_to_frame.py
                                test_to_numpy.py
                                test_truncate.py
                                test_tz_localize.py
                                test_unique.py
                                test_unstack.py
                                test_update.py
                                test_values.py
                                test_value_counts.py
                                test_view.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\strings/
                            conftest.py
                            test_api.py
                            test_case_justify.py
                            test_cat.py
                            test_extract.py
                            test_find_replace.py
                            test_get_dummies.py
                            test_split_partition.py
                            test_strings.py
                            test_string_array.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\tools/
                            test_to_datetime.py
                            test_to_numeric.py
                            test_to_time.py
                            test_to_timedelta.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\tseries/
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\tseries\frequencies/
                                test_frequencies.py
                                test_freq_code.py
                                test_inference.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\tseries\holiday/
                                test_calendar.py
                                test_federal.py
                                test_holiday.py
                                test_observance.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\tseries\offsets/
                                common.py
                                conftest.py
                                test_business_day.py
                                test_business_hour.py
                                test_business_month.py
                                test_business_quarter.py
                                test_business_year.py
                                test_common.py
                                test_custom_business_day.py
                                test_custom_business_hour.py
                                test_custom_business_month.py
                                test_dst.py
                                test_easter.py
                                test_fiscal.py
                                test_index.py
                                test_month.py
                                test_offsets.py
                                test_offsets_properties.py
                                test_quarter.py
                                test_ticks.py
                                test_week.py
                                test_year.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\tslibs/
                            test_api.py
                            test_array_to_datetime.py
                            test_ccalendar.py
                            test_conversion.py
                            test_fields.py
                            test_libfrequencies.py
                            test_liboffsets.py
                            test_np_datetime.py
                            test_parse_iso8601.py
                            test_parsing.py
                            test_period_asfreq.py
                            test_resolution.py
                            test_timedeltas.py
                            test_timezones.py
                            test_to_offset.py
                            test_tzconversion.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\util/
                            conftest.py
                            test_assert_almost_equal.py
                            test_assert_attr_equal.py
                            test_assert_categorical_equal.py
                            test_assert_extension_array_equal.py
                            test_assert_frame_equal.py
                            test_assert_index_equal.py
                            test_assert_interval_array_equal.py
                            test_assert_numpy_array_equal.py
                            test_assert_produces_warning.py
                            test_assert_series_equal.py
                            test_deprecate.py
                            test_deprecate_kwarg.py
                            test_deprecate_nonkeyword_arguments.py
                            test_doc.py
                            test_hashing.py
                            test_make_objects.py
                            test_numba.py
                            test_rewrite_warning.py
                            test_safe_import.py
                            test_shares_memory.py
                            test_show_versions.py
                            test_util.py
                            test_validate_args.py
                            test_validate_args_and_kwargs.py
                            test_validate_inclusive.py
                            test_validate_kwargs.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\window/
                            conftest.py
                            test_api.py
                            test_apply.py
                            test_base_indexer.py
                            test_cython_aggregations.py
                            test_dtypes.py
                            test_ewm.py
                            test_expanding.py
                            test_groupby.py
                            test_numba.py
                            test_online.py
                            test_pairwise.py
                            test_rolling.py
                            test_rolling_functions.py
                            test_rolling_quantile.py
                            test_rolling_skew_kurt.py
                            test_timeseries_window.py
                            test_win_type.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tests\window\moments/
                                conftest.py
                                test_moments_consistency_ewm.py
                                test_moments_consistency_expanding.py
                                test_moments_consistency_rolling.py
                                __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\tseries/
                        api.py
                        frequencies.py
                        holiday.py
                        offsets.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\util/
                        _decorators.py
                        _doctools.py
                        _exceptions.py
                        _print_versions.py
                        _tester.py
                        _test_decorators.py
                        _validators.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\util\version/
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\_config/
                        config.py
                        dates.py
                        display.py
                        localization.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\_libs/
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\_libs\tslibs/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\_libs\window/
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pandas\_testing/
                        asserters.py
                        compat.py
                        contexts.py
                        _hypothesis.py
                        _io.py
                        _warnings.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\paramiko/
                    agent.py
                    auth_handler.py
                    auth_strategy.py
                    ber.py
                    buffered_pipe.py
                    channel.py
                    client.py
                    common.py
                    compress.py
                    config.py
                    dsskey.py
                    ecdsakey.py
                    ed25519key.py
                    file.py
                    hostkeys.py
                    kex_curve25519.py
                    kex_ecdh_nist.py
                    kex_gex.py
                    kex_group1.py
                    kex_group14.py
                    kex_group16.py
                    kex_gss.py
                    message.py
                    packet.py
                    pipe.py
                    pkey.py
                    primes.py
                    proxy.py
                    rsakey.py
                    server.py
                    sftp.py
                    sftp_attr.py
                    sftp_client.py
                    sftp_file.py
                    sftp_handle.py
                    sftp_server.py
                    sftp_si.py
                    ssh_exception.py
                    ssh_gss.py
                    transport.py
                    util.py
                    win_openssh.py
                    win_pageant.py
                    _version.py
                    _winapi.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib/
                    apache.py
                    apps.py
                    context.py
                    exc.py
                    hash.py
                    hosts.py
                    ifc.py
                    pwd.py
                    registry.py
                    totp.py
                    win32.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib\crypto/
                        des.py
                        digest.py
                        _md4.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib\crypto\scrypt/
                            _builtin.py
                            _gen_files.py
                            _salsa.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib\crypto\_blowfish/
                            base.py
                            unrolled.py
                            _gen_files.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib\ext/
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib\ext\django/
                            models.py
                            utils.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib\handlers/
                        argon2.py
                        bcrypt.py
                        cisco.py
                        des_crypt.py
                        digests.py
                        django.py
                        fshp.py
                        ldap_digests.py
                        md5_crypt.py
                        misc.py
                        mssql.py
                        mysql.py
                        oracle.py
                        pbkdf2.py
                        phpass.py
                        postgres.py
                        roundup.py
                        scram.py
                        scrypt.py
                        sha1_crypt.py
                        sha2_crypt.py
                        sun_md5_crypt.py
                        windows.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib\tests/
                        backports.py
                        test_apache.py
                        test_apps.py
                        test_context.py
                        test_context_deprecated.py
                        test_crypto_builtin_md4.py
                        test_crypto_des.py
                        test_crypto_digest.py
                        test_crypto_scrypt.py
                        test_ext_django.py
                        test_ext_django_source.py
                        test_handlers.py
                        test_handlers_argon2.py
                        test_handlers_bcrypt.py
                        test_handlers_cisco.py
                        test_handlers_django.py
                        test_handlers_pbkdf2.py
                        test_handlers_scrypt.py
                        test_hosts.py
                        test_pwd.py
                        test_registry.py
                        test_totp.py
                        test_utils.py
                        test_utils_handlers.py
                        test_utils_md4.py
                        test_utils_pbkdf2.py
                        test_win32.py
                        tox_support.py
                        utils.py
                        _test_bad_register.py
                        __init__.py
                        __main__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib\utils/
                        binary.py
                        decor.py
                        des.py
                        handlers.py
                        md4.py
                        pbkdf2.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\passlib\utils\compat/
                            _ordered_dict.py
                            __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\past/
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\past\builtins/
                        misc.py
                        noniterators.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\past\translation/
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\past\types/
                        basestring.py
                        olddict.py
                        oldstr.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\past\utils/
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip/
                    __init__.py
                    __main__.py
                    __pip-runner__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal/
                        build_env.py
                        cache.py
                        configuration.py
                        exceptions.py
                        main.py
                        pyproject.py
                        self_outdated_check.py
                        wheel_builder.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\cli/
                            autocompletion.py
                            base_command.py
                            cmdoptions.py
                            command_context.py
                            main.py
                            main_parser.py
                            parser.py
                            progress_bars.py
                            req_command.py
                            spinners.py
                            status_codes.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\commands/
                            cache.py
                            check.py
                            completion.py
                            configuration.py
                            debug.py
                            download.py
                            freeze.py
                            hash.py
                            help.py
                            index.py
                            inspect.py
                            install.py
                            list.py
                            search.py
                            show.py
                            uninstall.py
                            wheel.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\distributions/
                            base.py
                            installed.py
                            sdist.py
                            wheel.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\index/
                            collector.py
                            package_finder.py
                            sources.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\locations/
                            base.py
                            _distutils.py
                            _sysconfig.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\metadata/
                            base.py
                            pkg_resources.py
                            _json.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\metadata\importlib/
                                _compat.py
                                _dists.py
                                _envs.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\models/
                            candidate.py
                            direct_url.py
                            format_control.py
                            index.py
                            installation_report.py
                            link.py
                            scheme.py
                            search_scope.py
                            selection_prefs.py
                            target_python.py
                            wheel.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\network/
                            auth.py
                            cache.py
                            download.py
                            lazy_wheel.py
                            session.py
                            utils.py
                            xmlrpc.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\operations/
                            check.py
                            freeze.py
                            prepare.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\operations\build/
                                build_tracker.py
                                metadata.py
                                metadata_editable.py
                                metadata_legacy.py
                                wheel.py
                                wheel_editable.py
                                wheel_legacy.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\operations\install/
                                editable_legacy.py
                                wheel.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\req/
                            constructors.py
                            req_file.py
                            req_install.py
                            req_set.py
                            req_uninstall.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\resolution/
                            base.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\resolution\legacy/
                                resolver.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\resolution\resolvelib/
                                base.py
                                candidates.py
                                factory.py
                                found_candidates.py
                                provider.py
                                reporter.py
                                requirements.py
                                resolver.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\utils/
                            appdirs.py
                            compat.py
                            compatibility_tags.py
                            datetime.py
                            deprecation.py
                            direct_url_helpers.py
                            egg_link.py
                            encoding.py
                            entrypoints.py
                            filesystem.py
                            filetypes.py
                            glibc.py
                            hashes.py
                            logging.py
                            misc.py
                            models.py
                            packaging.py
                            setuptools_build.py
                            subprocess.py
                            temp_dir.py
                            unpacking.py
                            urls.py
                            virtualenv.py
                            wheel.py
                            _jaraco_text.py
                            _log.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_internal\vcs/
                            bazaar.py
                            git.py
                            mercurial.py
                            subversion.py
                            versioncontrol.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor/
                        six.py
                        typing_extensions.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\cachecontrol/
                            adapter.py
                            cache.py
                            controller.py
                            filewrapper.py
                            heuristics.py
                            serialize.py
                            wrapper.py
                            _cmd.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\cachecontrol\caches/
                                file_cache.py
                                redis_cache.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\certifi/
                            core.py
                            __init__.py
                            __main__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\chardet/
                            big5freq.py
                            big5prober.py
                            chardistribution.py
                            charsetgroupprober.py
                            charsetprober.py
                            codingstatemachine.py
                            codingstatemachinedict.py
                            cp949prober.py
                            enums.py
                            escprober.py
                            escsm.py
                            eucjpprober.py
                            euckrfreq.py
                            euckrprober.py
                            euctwfreq.py
                            euctwprober.py
                            gb2312freq.py
                            gb2312prober.py
                            hebrewprober.py
                            jisfreq.py
                            johabfreq.py
                            johabprober.py
                            jpcntx.py
                            langbulgarianmodel.py
                            langgreekmodel.py
                            langhebrewmodel.py
                            langhungarianmodel.py
                            langrussianmodel.py
                            langthaimodel.py
                            langturkishmodel.py
                            latin1prober.py
                            macromanprober.py
                            mbcharsetprober.py
                            mbcsgroupprober.py
                            mbcssm.py
                            resultdict.py
                            sbcharsetprober.py
                            sbcsgroupprober.py
                            sjisprober.py
                            universaldetector.py
                            utf1632prober.py
                            utf8prober.py
                            version.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\chardet\cli/
                                chardetect.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\chardet\metadata/
                                languages.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\colorama/
                            ansi.py
                            ansitowin32.py
                            initialise.py
                            win32.py
                            winterm.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\colorama\tests/
                                ansitowin32_test.py
                                ansi_test.py
                                initialise_test.py
                                isatty_test.py
                                utils.py
                                winterm_test.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\distlib/
                            compat.py
                            database.py
                            index.py
                            locators.py
                            manifest.py
                            markers.py
                            metadata.py
                            resources.py
                            scripts.py
                            util.py
                            version.py
                            wheel.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\distro/
                            distro.py
                            __init__.py
                            __main__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\idna/
                            codec.py
                            compat.py
                            core.py
                            idnadata.py
                            intranges.py
                            package_data.py
                            uts46data.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\msgpack/
                            exceptions.py
                            ext.py
                            fallback.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\packaging/
                            markers.py
                            requirements.py
                            specifiers.py
                            tags.py
                            utils.py
                            version.py
                            _manylinux.py
                            _musllinux.py
                            _structures.py
                            __about__.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pkg_resources/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\platformdirs/
                            android.py
                            api.py
                            macos.py
                            unix.py
                            version.py
                            windows.py
                            __init__.py
                            __main__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pygments/
                            cmdline.py
                            console.py
                            filter.py
                            formatter.py
                            lexer.py
                            modeline.py
                            plugin.py
                            regexopt.py
                            scanner.py
                            sphinxext.py
                            style.py
                            token.py
                            unistring.py
                            util.py
                            __init__.py
                            __main__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pygments\filters/
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pygments\formatters/
                                bbcode.py
                                groff.py
                                html.py
                                img.py
                                irc.py
                                latex.py
                                other.py
                                pangomarkup.py
                                rtf.py
                                svg.py
                                terminal.py
                                terminal256.py
                                _mapping.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pygments\lexers/
                                python.py
                                _mapping.py
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pygments\styles/
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pyparsing/
                            actions.py
                            common.py
                            core.py
                            exceptions.py
                            helpers.py
                            results.py
                            testing.py
                            unicode.py
                            util.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pyparsing\diagram/
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pyproject_hooks/
                            _compat.py
                            _impl.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\pyproject_hooks\_in_process/
                                _in_process.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\requests/
                            adapters.py
                            api.py
                            auth.py
                            certs.py
                            compat.py
                            cookies.py
                            exceptions.py
                            help.py
                            hooks.py
                            models.py
                            packages.py
                            sessions.py
                            status_codes.py
                            structures.py
                            utils.py
                            _internal_utils.py
                            __init__.py
                            __version__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\resolvelib/
                            providers.py
                            reporters.py
                            resolvers.py
                            structs.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\resolvelib\compat/
                                collections_abc.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\rich/
                            abc.py
                            align.py
                            ansi.py
                            bar.py
                            box.py
                            cells.py
                            color.py
                            color_triplet.py
                            columns.py
                            console.py
                            constrain.py
                            containers.py
                            control.py
                            default_styles.py
                            diagnose.py
                            emoji.py
                            errors.py
                            filesize.py
                            file_proxy.py
                            highlighter.py
                            json.py
                            jupyter.py
                            layout.py
                            live.py
                            live_render.py
                            logging.py
                            markup.py
                            measure.py
                            padding.py
                            pager.py
                            palette.py
                            panel.py
                            pretty.py
                            progress.py
                            progress_bar.py
                            prompt.py
                            protocol.py
                            region.py
                            repr.py
                            rule.py
                            scope.py
                            screen.py
                            segment.py
                            spinner.py
                            status.py
                            style.py
                            styled.py
                            syntax.py
                            table.py
                            terminal_theme.py
                            text.py
                            theme.py
                            themes.py
                            traceback.py
                            tree.py
                            _cell_widths.py
                            _emoji_codes.py
                            _emoji_replace.py
                            _export_format.py
                            _extension.py
                            _fileno.py
                            _inspect.py
                            _log_render.py
                            _loop.py
                            _null_file.py
                            _palettes.py
                            _pick.py
                            _ratio.py
                            _spinners.py
                            _stack.py
                            _timer.py
                            _win32_console.py
                            _windows.py
                            _windows_renderer.py
                            _wrap.py
                            __init__.py
                            __main__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\tenacity/
                            after.py
                            before.py
                            before_sleep.py
                            nap.py
                            retry.py
                            stop.py
                            tornadoweb.py
                            wait.py
                            _asyncio.py
                            _utils.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\tomli/
                            _parser.py
                            _re.py
                            _types.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\truststore/
                            _api.py
                            _macos.py
                            _openssl.py
                            _ssl_constants.py
                            _windows.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\urllib3/
                            connection.py
                            connectionpool.py
                            exceptions.py
                            fields.py
                            filepost.py
                            poolmanager.py
                            request.py
                            response.py
                            _collections.py
                            _version.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\urllib3\contrib/
                                appengine.py
                                ntlmpool.py
                                pyopenssl.py
                                securetransport.py
                                socks.py
                                _appengine_environ.py
                                __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\urllib3\contrib\_securetransport/
                                    bindings.py
                                    low_level.py
                                    __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\urllib3\packages/
                                six.py
                                __init__.py
                                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\urllib3\packages\backports/
                                    makefile.py
                                    weakref_finalize.py
                                    __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\urllib3\util/
                                connection.py
                                proxy.py
                                queue.py
                                request.py
                                response.py
                                retry.py
                                ssltransport.py
                                ssl_.py
                                ssl_match_hostname.py
                                timeout.py
                                url.py
                                wait.py
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pip\_vendor\webencodings/
                            labels.py
                            mklabels.py
                            tests.py
                            x_user_defined.py
                            __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pkg_resources/
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pkg_resources\extern/
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pkg_resources\_vendor/
                        typing_extensions.py
                        zipp.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pkg_resources\_vendor\importlib_resources/
                            abc.py
                            readers.py
                            simple.py
                            _adapters.py
                            _common.py
                            _compat.py
                            _itertools.py
                            _legacy.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pkg_resources\_vendor\jaraco/
                            context.py
                            functools.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pkg_resources\_vendor\jaraco\text/
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pkg_resources\_vendor\more_itertools/
                            more.py
                            recipes.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pkg_resources\_vendor\packaging/
                            markers.py
                            metadata.py
                            requirements.py
                            specifiers.py
                            tags.py
                            utils.py
                            version.py
                            _elffile.py
                            _manylinux.py
                            _musllinux.py
                            _parser.py
                            _structures.py
                            _tokenizer.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pkg_resources\_vendor\platformdirs/
                            android.py
                            api.py
                            macos.py
                            unix.py
                            version.py
                            windows.py
                            __init__.py
                            __main__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pycparser/
                    ast_transforms.py
                    c_ast.py
                    c_generator.py
                    c_lexer.py
                    c_parser.py
                    lextab.py
                    plyparser.py
                    yacctab.py
                    _ast_gen.py
                    _build_tables.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pycparser\ply/
                        cpp.py
                        ctokens.py
                        lex.py
                        yacc.py
                        ygen.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\pytz/
                    exceptions.py
                    lazy.py
                    reference.py
                    tzfile.py
                    tzinfo.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\requests/
                    adapters.py
                    api.py
                    auth.py
                    certs.py
                    compat.py
                    cookies.py
                    exceptions.py
                    help.py
                    hooks.py
                    models.py
                    packages.py
                    sessions.py
                    status_codes.py
                    structures.py
                    utils.py
                    _internal_utils.py
                    __init__.py
                    __version__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\serial/
                    rfc2217.py
                    rs485.py
                    serialcli.py
                    serialjava.py
                    serialposix.py
                    serialutil.py
                    serialwin32.py
                    win32.py
                    __init__.py
                    __main__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\serial\threaded/
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\serial\tools/
                        hexlify_codec.py
                        list_ports.py
                        list_ports_common.py
                        list_ports_linux.py
                        list_ports_osx.py
                        list_ports_posix.py
                        list_ports_windows.py
                        miniterm.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\serial\urlhandler/
                        protocol_alt.py
                        protocol_cp2110.py
                        protocol_hwgrep.py
                        protocol_loop.py
                        protocol_rfc2217.py
                        protocol_socket.py
                        protocol_spy.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools/
                    archive_util.py
                    build_meta.py
                    depends.py
                    dep_util.py
                    discovery.py
                    dist.py
                    errors.py
                    extension.py
                    glob.py
                    installer.py
                    launch.py
                    logging.py
                    monkey.py
                    msvc.py
                    namespaces.py
                    package_index.py
                    py312compat.py
                    sandbox.py
                    unicode_utils.py
                    version.py
                    warnings.py
                    wheel.py
                    windows_support.py
                    _core_metadata.py
                    _entry_points.py
                    _imp.py
                    _importlib.py
                    _itertools.py
                    _normalization.py
                    _path.py
                    _reqs.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\command/
                        alias.py
                        bdist_egg.py
                        bdist_rpm.py
                        build.py
                        build_clib.py
                        build_ext.py
                        build_py.py
                        develop.py
                        dist_info.py
                        easy_install.py
                        editable_wheel.py
                        egg_info.py
                        install.py
                        install_egg_info.py
                        install_lib.py
                        install_scripts.py
                        register.py
                        rotate.py
                        saveopts.py
                        sdist.py
                        setopt.py
                        test.py
                        upload.py
                        upload_docs.py
                        _requirestxt.py
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\config/
                        expand.py
                        pyprojecttoml.py
                        setupcfg.py
                        _apply_pyprojecttoml.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\config\_validate_pyproject/
                            error_reporting.py
                            extra_validations.py
                            fastjsonschema_exceptions.py
                            fastjsonschema_validations.py
                            formats.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\extern/
                        __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_distutils/
                        archive_util.py
                        bcppcompiler.py
                        ccompiler.py
                        cmd.py
                        config.py
                        core.py
                        cygwinccompiler.py
                        debug.py
                        dep_util.py
                        dir_util.py
                        dist.py
                        errors.py
                        extension.py
                        fancy_getopt.py
                        filelist.py
                        file_util.py
                        log.py
                        msvc9compiler.py
                        msvccompiler.py
                        py38compat.py
                        py39compat.py
                        spawn.py
                        sysconfig.py
                        text_file.py
                        unixccompiler.py
                        util.py
                        version.py
                        versionpredicate.py
                        _collections.py
                        _functools.py
                        _log.py
                        _macos_compat.py
                        _msvccompiler.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_distutils\command/
                            bdist.py
                            bdist_dumb.py
                            bdist_rpm.py
                            build.py
                            build_clib.py
                            build_ext.py
                            build_py.py
                            build_scripts.py
                            check.py
                            clean.py
                            config.py
                            install.py
                            install_data.py
                            install_egg_info.py
                            install_headers.py
                            install_lib.py
                            install_scripts.py
                            py37compat.py
                            register.py
                            sdist.py
                            upload.py
                            _framework_compat.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_vendor/
                        ordered_set.py
                        typing_extensions.py
                        zipp.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_vendor\importlib_metadata/
                            _adapters.py
                            _collections.py
                            _compat.py
                            _functools.py
                            _itertools.py
                            _meta.py
                            _py39compat.py
                            _text.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_vendor\importlib_resources/
                            abc.py
                            readers.py
                            simple.py
                            _adapters.py
                            _common.py
                            _compat.py
                            _itertools.py
                            _legacy.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_vendor\jaraco/
                            context.py
                            functools.py
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_vendor\jaraco\text/
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_vendor\more_itertools/
                            more.py
                            recipes.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_vendor\packaging/
                            markers.py
                            metadata.py
                            requirements.py
                            specifiers.py
                            tags.py
                            utils.py
                            version.py
                            _elffile.py
                            _manylinux.py
                            _musllinux.py
                            _parser.py
                            _structures.py
                            _tokenizer.py
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\setuptools\_vendor\tomli/
                            _parser.py
                            _re.py
                            _types.py
                            __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tests/
                    conftest.py
                    excldiff_test.py
                    performance_case.py
                    test_Ccp_Util.py
                    test_CiscoConfParse.py
                    test_Models_Asa.py
                    test_Models_Cisco.py
                    test_Models_Junos.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\textfsm/
                    clitable.py
                    copyable_regex_object.py
                    parser.py
                    terminal.py
                    texttable.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\toml/
                    decoder.py
                    encoder.py
                    ordered.py
                    tz.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata/
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo/
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Africa/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\America/
                            __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\America\Argentina/
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\America\Indiana/
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\America\Kentucky/
                                __init__.py
                            C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\America\North_Dakota/
                                __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Antarctica/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Arctic/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Asia/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Atlantic/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Australia/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Brazil/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Canada/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Chile/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Etc/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Europe/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Indian/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Mexico/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\Pacific/
                            __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\tzdata\zoneinfo\US/
                            __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\urllib3/
                    connection.py
                    connectionpool.py
                    exceptions.py
                    fields.py
                    filepost.py
                    poolmanager.py
                    response.py
                    _base_connection.py
                    _collections.py
                    _request_methods.py
                    _version.py
                    __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\urllib3\contrib/
                        pyopenssl.py
                        securetransport.py
                        socks.py
                        __init__.py
                        C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\urllib3\contrib\_securetransport/
                            bindings.py
                            low_level.py
                            __init__.py
                    C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\urllib3\util/
                        connection.py
                        proxy.py
                        request.py
                        response.py
                        retry.py
                        ssltransport.py
                        ssl_.py
                        ssl_match_hostname.py
                        timeout.py
                        url.py
                        util.py
                        wait.py
                        __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\wrapt/
                    arguments.py
                    decorators.py
                    importer.py
                    wrappers.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\yaml/
                    composer.py
                    constructor.py
                    cyaml.py
                    dumper.py
                    emitter.py
                    error.py
                    events.py
                    loader.py
                    nodes.py
                    parser.py
                    reader.py
                    representer.py
                    resolver.py
                    scanner.py
                    serializer.py
                    tokens.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\_distutils_hack/
                    override.py
                    __init__.py
                C:\Users\jacki\Downloads\Homelab\DC_Automation\venv\Lib\site-packages\_yaml/
                    __init__.py
